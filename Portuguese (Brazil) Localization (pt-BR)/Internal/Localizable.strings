/* mountefiController */
"%@ APFS Container [%@]" = "%1$@ APFS Container [%2$@]";

/* mountefiController */
"%lu partitions" = "%lu partições";

/* sidebarMenu */
"ACPI" = "ACPI";

/* No comment provided by engineer. */
"B/s" = "B/s";

/* startScreen */
"Backup Configurations" = "Configurações de cópia de segurança";

/* sectionSourceListHexConverterPopover */
"base64 string" = "base64 string";

/* sidebarMenu */
"Booter" = "Booter";

/* opencoreDownloaderController outlinemodeController */
"Cancel" = "Cancelar";

/* mountefiController */
"Capacity In Use:" = "Capacidade utilizada:";

/* kextsInstallerController */
"Check" = "Verificar";

/* mountefiController */
"Check Partition" = "Verificar partição";

/* startScreen */
"Configurations Acquired" = "Configurações adquiridas";

/* pasteBoardController */
"Copy" = "Copiar";

/* AFNetworking */
"Could not decode string: %@" = "Não foi possível descodificar a string: %@";

/* pasteBoardController */
"Cut" = "Cortar";

/* AFNetworking */
"Data failed decoding as a UTF-8 string" = "Los datos fallaron al decodificarse como una cadena UTF-8";

/* No comment provided by engineer. */
"Day" = "Día";

/* No comment provided by engineer. */
"Days" = "Días";

/* sectionSourceListHexConverterPopover */
"decimal string" = "decimal string";

/* kextsInstallerController */
"Delete: %@ successfully removed" = "Borrar: %@ eliminado correctamente";

/* installDriversController */
"Delete: %@.efi successfully removed" = "Borrar: %@.efi eliminado correctamente";

/* mountefiController */
"Device BSD Name:" = "Nombre BSD del dispositivo:";

/* mountefiController */
"Device BSD Name: %@" = "Nombre BSD del dispositivo: %@";

/* mountefiController */
"Device BSD Name: N/A" = "Nombre BSD del dispositivo: N/A";

/* mountefiController */
"Device Identifier: %@ - APFS Physical Store Disk: %@ - UUID: %@ - Size: %@" = "Identificador del dispositivo: %1$@ - Disco físico de almacenamiento APFS: %2$@ - UUID: %3$@ - Tamaño: %4$@";

/* mountefiController */
"Device Identifier: %@ - Partition Scheme: %@ - Size: %@" = "Identificador del dispositivo: %1$@ - Sistema de partición: %2$@ - Tamaño: %3$@";

/* sidebarMenu */
"DeviceProperties" = "Propiedades del dispositivo";

/* mountefiController */
"Devices / Media Name:" = "Dispositivos / Nombre del medio:";

/* mountefiController */
"Devices / Media Name: %@" = "Dispositivos/ Nombre del medio: %@";

/* mountefiController */
"Disk Identifier:" = "Identificador del disco:";

/* mountefiController */
"Disk Identifier: %@ Status: [Current Boot Disk]" = "Identificador del disco: %@ Estado: [Disco de arranque actual]";

/* mountefiController */
"Disk Type:" = "Tipo de disco:";

/* mountefiController */
"Disk Type: %@" = "Tipo de disco: %@";

/* mountefiController */
"Disk Type: APFS Container" = "Tipo de disco: APFS Container";

/* mountefiController */
"Disk Type: APFS Volume" = "Tipo de disco: Volumen APFS";

/* mountefiController */
"Disk Type: Apple HFS+" = "Tipo de disco: Apple HFS+";

/* mountefiController */
"Disk Type: N/A" = "Tipo de disco: N/A";

/* mountefiController */
"Disk Type: SoftRAID Cache" = "Tipo de disco: Caché SoftRAID";

/* mountefiController */
"Disk Type: SoftRAID Scratch" = "Tipo de disco: SoftRAID Scratch";

/* mountefiController */
"Disk Type: SoftRAID Status" = "Tipo de disco: Estado de SoftRAID";

/* mountefiController */
"Disk Type: SoftRAID Volume" = "Tipo de disco: Volumen SoftRAID";

/* mountefiController */
"Disk UUID:" = "UUID del disco:";

/* mountefiController */
"Disk UUID: %@" = "UUID del disco: %@";

/* mountefiController */
"Disk UUID: N/A" = "UUID del disco: N/A";

/* installDriversController
   kextsInstallerController
   opencoreDownloaderController */
"Download" = "Descargar";

/* installDriversController
   kextsInstallerController */
"Download: %@ has been successfully copied to %@" = "Descargar: %1$@ se ha copiado correctamente en %2$@";

/* installDriversController
   kextsInstallerController */
"Download: %@ has been successfully updated to %@" = "Descargar: %1$@ se ha actualizado correctamente en %2$@";

/* kextsInstallerController */
"Download: %@ successfully backed up to %@" = "Descargar: %1$@ respaldado con éxito en %2$@";

/* installDriversController
   kextsInstallerController */
"Download: %@ successfully downloaded...." = "Descargar: %@ descargado correctamente....";

/* installDriversController
   kextsInstallerController */
"Download: Error: %@" = "Descargar: Error: %@";

/* kextsInstallerController */
"Download: ERROR: %@" = "Descargar: ERROR: %@";

/* installDriversController
   kextsInstallerController */
"Download: ERROR: You don't have permission to write here!" = "Descargar: ERROR: ¡No tienes permiso para escribir aquí!";

/* installDriversController
   kextsInstallerController */
"Download: Path doesn't exist!" = "Descargar: ¡La ruta no existe!";

/* installDriversController */
"Download: Please select a driver name!" = "Descargar: ¡Seleccione un nombre del driver!";

/* installToolsController */
"Download: Please select a tool name!" = "Descargar: ¡Seleccione un nombre para la herramienta!";

/* kextsInstallerController */
"Download: Please select a kext name!" = "Descargar: ¡Por favor, seleccione un nombre para el kext!";

/* opencoreDownloaderController */
"Downloading %@" = "Descargando %@";

/* reading_savingOperation */
"Error" = "Error";

/* opencoreDownloaderController */
"Error during unzipping file!" = "¡Error al descomprimir el archivo!";

/* opencoreDownloaderController */
"Error: %@" = "Error: %@";

/* kextsInstallerController */
"FakeSMC detected... Choose an add on to install..." = "FakeSMC detectado ... Elija un complemento para instalar ...";

/* No comment provided by engineer. */
"GB/s" = "GB/s";

/* sectionSourceListHexConverterPopover */
"HEX Converter" = "Convertidor Hexadecimal";

/* sectionSourceListHexConverterPopover */
"HEX string" = "HEX string";

/* No comment provided by engineer. */
"Hour" = "Hora";

/* No comment provided by engineer. */
"Hours" = "Horas";

/* openPanelConfigConverterTool */
"Import a Clover config file for conversion" = "Importe un archivo de configuración de Clover para la conversión";

/* installDriversController
   kextsInstallerController
   opencoreDownloaderController */
"Initialization: Unable to read database. Cannot find server or there's no internet connection." = "Inicialización: no se puede leer la base de datos. No se puede encontrar el servidor o no hay conexión a Internet.";

/* bdmesgController */
"Nothing to read here! Try to configure \"Target\" tecla en la sección Misc->Debug" = "¡Nada que leer aquí! Intenta configurar \"Target\" tecla en la sección Misc->Debug";

/* sectionSourceListHexConverterPopover */
"Invalid base64 data" = "Datos base64 no válidos";

/* sectionSourceListHexConverterPopover */
"Invalid data" = "Datos inválidos";

/* sectionSourceListHexConverterPopover */
"Invalid HEX data" = "Datos Hexadecimales no válidos";

/* No comment provided by engineer. */
"KB/s" = "KB/s";

/* sidebarMenu */
"Kernel" = "Kernel";

/* left_toolbar */
"Load Configuration" = "Cargar configuración";

/* kextsInstallerController */
"Manual Installation: %@ has been successfully copied to %@" = "Instalación Manual: %1$@ se ha copiado con éxito en %2$@";

/* kextsInstallerController */
"Manual Installation: %@ has been successfully updated to %@" = "Instalación Manual: %1$@ ha sido actualizado con éxito en %2$@";

/* kextsInstallerController */
"Manual Installation: %@ successfully backed up to %@" = "Instalación Manual: %1$@ respaldado con éxito en %2$@";

/* kextsInstallerController */
"Manual Installation: ERROR: %@" = "Instalación Manual: ERROR: %@";

/* kextsInstallerController */
"Manual Installation: ERROR: You don't have permission to write here!" = "Instalación Manual: ERROR: ¡No tienes permiso para escribir aquí!";

/* kextsInstallerController */
"Manual Installation: Kext file required!" = "Instalación Manual: ¡Se requiere el archivo Kext!";

/* kextsInstallerController */
"Manual Installation: Path doesn't exist!" = "Instalación Manual: ¡La ruta no existe!";

/* No comment provided by engineer. */
"MB/s" = "MB/s";

/* No comment provided by engineer. */
"Minute" = "Minuto";

/* No comment provided by engineer. */
"Minutes" = "Minutos";

/* sidebarMenu */
"Misc" = "Misc";

/* mountefiController */
"Mount Point:" = "Punto de Montaje:";

/* mountefiController */
"Mount Point: %@" = "Punto de Montaje: %@";

/* mountefiController */
"Mount Point: N/A" = "Punto de Montaje: N/A";

/* opencoreDownloaderController */
"No EFI folder found. Creating one...." = "No se ha encontrado ninguna carpeta EFI. Crear una....";

/* sidebarMenu */
"NVRAM" = "NVRAM";

/* opencoreDownloaderController */
"Old file has been renamed to BOOTx64_%@.efi.bak" = "El antiguo archivo se ha renombrado como BOOTx64_%@.efi.bak";

/* opencoreDownloaderController */
"Old file has been renamed to OpenCore_%@.efi.bak" = "El antiguo archivo se ha renombrado como OpenCore_%@.efi.bak";

/* reading_savingOperation */
"OpenCore Configurator could not be synchronized because an error occurred: %@" = "OpenCore Configurator no se ha podido sincronizar porque se ha producido un error: %@";

/* pasteBoardController */
"Paste" = "Pegar";

/* left_toolbar */
"Paypal - Free Donation" = "Paypal - Donación ♡";

/* sidebarMenu */
"PlatformInfo" = "PlatformInfo";

/* reading_savingOperation */
"Repair" = "Reparar";

/* mainMenu */
"Restart" = "Reiniciar";

/* left_toolbar */
"Save" = "Guardar";

/* left_toolbar */
"Save As..." = "Guardar como...";

/* left_toolbar */
"Save, Save As Configuration" = "Guardar, Guardar como Configuración";

/* No comment provided by engineer. */
"Second" = "Segundo";

/* No comment provided by engineer. */
"Seconds" = "Segundos";

/* left_toolbar */
"Share" = "Compartir";

/* kextsInstallerController */
"Show Location: Path doesn't exist!" = "Mostrar ubicación: ¡La ruta no existe!";

/* mountefiController */
"Size:" = "Tamaño:";

/* kextsInstallerController */
"Some info for %@.kext => Identifier: %@ | Version: %@%@" = "Información parcial para %1$@.kext =>Identificador: %2$@ | Versión: %3$@%4$@";

/* rtvariablesController */
"Sorry to generate a valid ROM, you need unique UUID in System UUID (copy from system or generate one) or go in System UUID and add a valid uuid in the format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX." = "Sorry to generate a valid ROM, you need unique UUID in System UUID (copy from system or generate one) or go in System UUID and add a valid uuid in the format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX.";

/* mountefiController */
"Status:" = "Status:";

/* reading_savingOperation */
"Synchronized" = "Sincronizado";

/* sectionSourceListHexConverterPopover */
"text string" = "texto tipo string";

/* mainMenu */
"To apply this change, you must restart the app" = "Para aplicar este cambio, es necesario reiniciar la aplicación";

/* mainMenu */
"Do you also want to change fork type?" = "Do you also want to change fork type?";

/* mainMenu */
"Do you also want to change configuration properties type?" = "¿También desea cambiar el tipo de propiedades de configuración?";

/* sidebarMenu */
"UEFI" = "UEFI";

/* installDriversController
   opencoreDownloaderController */
"Unable to read database." = "No se ha podido leer la base de datos.";

/* mountefiController */
"Untitled" = "Untitled";

/* opencoreDownloaderController */
"Unzip process was aborted because I can't create a backup" = "El proceso de descompresión se ha interrumpido porque no puedo crear una copia de seguridad.";

/* kextsInstallerController */
"Unzip: Error during unzipping file!" = "Descomprimir: ¡Error al descomprimir el archivo!";

/* opencoreDownloaderController */
"Unzipped..." = "Descomprimido...";

/* kextsInstallerController */
"Update available for %@.kext => Local version: %@ | Remote version: %@" = "Actualización disponible para %1$@.kext =>Versión local: %2$@ | Versión actual: %3$@";

/* kextsInstallerController */
"VirtualSMC detected... Choose an add on to install..." = "VirtualSMC detectado ... Seleccione el complemento que desea instalar...";

/* kextsInstallerController */
"Intel Wi-Fi detected... Choose an add on to install..." = "Intel Wi-Fi detectado... Seleccione el complemento que desea instalar...";

/* mountefiController */
"Volume Identifier:" = "Identificador del volumen:";

/* mountefiController */
"Volume Identifier: %@" = "Identificador del volumen: %@";

/* mountefiController */
"Volume Identifier: %@ Status: [Current Boot Disk]" = "Identificador del volumen: %@ Status: [Current Boot Disk]";

/* mountefiController */
"Volume Name:" = "Nombre del volumen:";

/* mountefiController */
"Volume Name: %@" = "Nombre del volumen: %@";

/* mountefiController */
"Volume UUID:" = "UUID del volumen:";

/* mountefiController */
"Volume UUID: %@" = "UUID del volumen: %@";

/* mountefiController */
"Volume UUID: N/A" = "UUID del volumen: N/A";

/* opencoreDownloaderController */
"You don't have permission to write here!" = "¡No tiene permiso para escribir aquí!";

/* dockMenu */
"New Configuration..." = "Nueva configuración...";

/* dockMenu */
"Open Configuration..." = "Abrir configuración...";

/* dockMenu */
"Leave A Message" = "Deja un mensaje";

/* installDriversController opencoreDownloaderController */
"No EFI folder found.....\n" = "No se encontró la carpeta EFI.....\n";

/* preferencesPanel */
"Release Version" = "Release Version";

/* preferencesPanel */
"Development Version" = "Development Version";

/* deviceProperties_table_properties_menu */
"Audio Device Properties" = "Propiedades del dispositivo de audio";

/* deviceProperties_table_properties_menu */
"Video Device Properties" = "Propiedades del dispositivo de vídeo";

/* deviceProperties_table_properties_menu */
"Advanced Properties" = "Propiedades avanzadas";

/* deviceProperties_table_properties_menu */
"display number" = "display number";

/* deviceProperties_table_properties_menu */
"Connections" = "Conexiones";

/* deviceProperties_table_properties_menu */
"connector index" = "connector index";

/* deviceProperties_table_properties_menu */
"Other" = "Otro";

/* deviceProperties_table_properties_menu */
"Presets" = "Presets";

/* deviceProperties_table_properties_menu */
"High Sierra" = "High Sierra";

/* deviceProperties_table_properties_menu */
"Mojave and above" = "Mojave y superiores";

/* deviceProperties_table_properties_menu */
"Device Properties" = "Device Properties";

/* deviceProperties_table_properties_menu */
"Help" = "Ayuda";

/* deviceProperties_table_properties_menu */
"Select '%@' device before adding '%@' key" = "Seleccione el dispositivo '%1$@' antes de añadir la key '%2$@'";

/* deviceProperties_table_properties_menu */
"Select a '%@' device before adding a preset" = "Seleccione un dispositivo '%1$@' antes de añadir una preajuste";

/* deviceProperties_table_properties_menu */
"Select a Platform ID before adding a preset" = "Seleccione un ID de plataforma antes de añadir un preajuste";

/* deviceProperties_table_properties_menu */
"Select a valid device path" = "Seleccione una ruta de dispositivo válida";

/* deviceProperties_table_properties_menu */
"Product Name" = "Nombre del producto";

/* deviceProperties_table_properties_menu */
"CPU Codename" = "Codename del CPU";

/* deviceProperties_table_properties_menu */
"Platform ID" = "Platform ID";

/* deviceProperties_table_properties_menu */
"Device ID" = "Device ID";

/* deviceProperties_table_properties_menu */
"Device Name" = "Device Name";

/* deviceProperties_table_properties_menu */
"Available Device IDs" = "IDs de dispositivo disponible";

/* deviceProperties_table_properties_menu */
"Available Models" = "Modelos disponibles";

/* nvram_add_properties_table */
"Select a valid UUID" = "Seleccione un UUID válido";

/* compatibilityWarningScreen */
"You seem to have an old version of OpenCore bootloader." = "Parece que tem uma versão antiga do OpenCore bootloader.";

/* compatibilityWarningScreen */
"The bootloader looks like it is not installed or your NVRAM isn't native." = "O bootloader parece não estar instalado ou a sua NVRAM não é nativa.";

/* compatibilityWarningScreen */
"2nd_message" = "Esta aplicação cria um ficheiro de configuração para %1$@ e versões superiores..";

/* compatibilityWarningScreen */
"Use at your own risk" = "¡¡ Utilize por sua conta e risco !!";

/* compatibilityWarningScreen */
"(select 'Backup File Before Saving' in Preferences Pane)" = "(seleccione 'Fazer cópia de segurança do ficheiro antes de guardar' no painel de preferências)";

/* advancedUser */
"The key “%@” already exists in containing item." = "La clave  “%@”  ya existe en el elemento contenedor.";

/* advancedUser */
"(%lu items)" = "(%lu elementos)";

/* advancedUser */
"Item %lu" = "elemento %lu";

/* advancedUser */
"New item" = "Nuevo elementos";

/* outlineMode */
"Cut" = "Cortar";

/* outlineMode */
"Copy" = "Copiar";

/* outlineMode */
"Paste" = "Pegar";

/* outlineMode */
"Delete" = "Eliminar";

/* outlineMode */
"Value Type" = "Tipo de valor";

/* outlineMode */
"Array" = "Array";

/* outlineMode */
"Dictionary" = "Diccionario";

/* outlineMode */
"Boolean" = "Boolean";

/* outlineMode */
"Data" = "Data";

/* outlineMode */
"Date" = "Fecha";

/* outlineMode */
"Number" = "Número";

/* outlineMode */
"String" = "String";

/* outlineMode */
"Add Item" = "Añadir artículo";

/* outlineMode */
"Replace" = "Sustituir";

/* outlineMode */
"Key" = "Clave";

/* outlineMode */
"Type" = "Tipo";

/* outlineMode */
"Value" = "Valor";

/* miscController */
"Please make sure to select a file from a boot efi path." = "Por favor, asegúrese de seleccionar un archivo de una ruta efi de arranque.";

/* miscController */
"No efi boot path found." = "No se ha encontrado la ruta de arranque efi.";

/* quicktoolsController */
"%@ on Disk Identifier: %@" = "%1$@ en el Identificador de Disco %2$@";

/* quicktoolsController */
"Status: [%@]" = "Estatus: [%@]";

/* quicktoolsController */
"OpenCore Boot Partition" = "Partición de arranque OpenCore";

/* preferencesPanel */
"Official" = "Oficial";

/* preferencesPanel */
"MOD" = "MOD";

/* preferencesPanel */
"App Settings" = "Configuración de la aplicación";

/* preferencesPanel */
"OpenCore Settings" = "Configuración de OpenCore";

/* titleBar */
"Release Configuration" = "%1$@ Configuración de liberación";

/* titleBar */
"Development Configuration" = "%1$@ Configuración de desarrollo";

/* titleBar */
"for Official OpenCore" = "para la versión oficial de OpenCore";

/* titleBar */
"for MOD OpenCore" = "para MOD OpenCore";

/* reading_savingOperation */
"This configuration contains one or more properties that Official OpenCore doesn't usually use. Do you want to open this configuration in MOD mode?" = "Esta configuración contiene una o más propiedades que Official OpenCore no suele utilizar. ¿Desea abrir esta configuración en modo MOD?";

/* reading_savingOperation */
"This configuration contains standard properties but you are working in MOD mode. Do you want switch to Official mode?" = "Esta configuración contiene propiedades estándar pero está trabajando en modo MOD. ¿Desea cambiar al modo Oficial?";

/* reading_savingOperation */
"For changes to take effect, this app will be relaunched" = "Para que los cambios surtan efecto, esta aplicación deberá reiniciarse.";

/* outlinemodeController */
"If you continue, all unknown keys will be lost" = "Si continúa, todas las claves desconocidas se perderán";

/* textmodeController */
"Syncronize" = "Sincronizar";

/* textmodeController */
"Syncronize Outline Mode" = "Syncronize Outline Mode";

/* importPatchesController */
"Import set of patches" = "Importar el conjunto de parches";

/* importPatchesController */
"Import set of kexts" = "Importar conjunto de kexts";

/* importPatchesController */
"Export selected patches" = "Exportar parches seleccionados";

/* importPatchesController */
"Export selected kexts" = "Exportar kexts seleccionados";

/* importPatchesController */
"Add set of patches from database" = "Añadir un conjunto de parches desde la base de datos";

/* importPatchesController */
"Add set of kexts from database" = "Añadir conjunto de kexts desde la base de datos";

/* importPatchesController */
"Battery Patches" = "Parches de batería";

/* importPatchesController */
"Rename Patches" = "Renombrar parches";

/* configCheckerController */
"Check current configurations (if you managing multiple windows, select the window you want to check). Save your configuration before continuing to check." = "Compruebe las configuraciones actuales (si gestiona varias ventanas, seleccione la ventana que desea comprobar). Guarde la configuración antes de seguir comprobando.";

/* configCheckerController */
"Import configuration from local selecting \"Seleccione...\"" = "Importar configuración desde selección local \"Seleccione...\"";

/* configCheckerController */
"Drag your configuration here" = "Arrastre su configuración aquí";

/* configCheckerController */
"No Network Access" = "Sin acceso a la red";

/* configCheckerController */
"Uploading..." = "Cargando...";

/* configCheckerController */
"Downloading Resources..." = "Descargando recursos...";

/* configCheckerController */
"Downloaded %.2f MB of %.2f MB (%@)" = "Descargado %1$.2f MB of %2$.2f MB (%3$@)";

/* configCheckerController */
"Resources Extraction..." = "Extracción de recursos...";

/* configCheckerController */
"Ready!" = "¡Listo!";

/* configCheckerController */
"Error extracting resources files!" = "¡Error al extraer archivos de los recursos!";

/* configCheckerController */
"Failed to download resources!" = "¡No se pueden descargar los recursos!";

/* configCheckerController */
"Updating Resources..." = "Actualizando recursos...";

/* configCheckerController */
"Checking For Resources..." = "Verificando los recursos...";

/* configCheckerController */
"Desktop" = "Desktop";

/* configCheckerController */
"High-End Desktop" = "High-End Desktop";

/* configCheckerController */
"Laptop" = "Laptop";

/* opencoreDownloaderController */
"Successfully backed up to %@" = "Copia de seguridad realizada con éxito en %@";

/* opencoreDownloaderController */
"Error during creating EFI backup folder!" = "¡Error al crear la carpeta de copia de seguridad del EFI!";

/* ocValidator */
"Connection Established" = "Conexión establecida";

/* ocValidator */
"Failed to checking resources!" = "¡No se pudieron verificar los recursos!";

/* platformInfoController */
"No Network Access. You may not get latest SMBIOS data." = "No hay acceso a la red. Es posible que no obtenga los datos SMBIOS más recientes.";

/* installDriversController */
"Download: %@ removed from queue because is not compatible with 32-bit version." = "Descargar: %@ eliminado de la cola porque no es compatible con la versión de 32 bits.";

/* efiMaker */
"Based on OpenCore Bootloader settings by Dortania's help guide" = "Basado en la configuración de OpenCore Bootloader de la guía de ayuda de Dortania";

/* efiMaker */
"For more information about different settings, click on each CPU Family option" = "Para obtener más información sobre los distintos ajustes, haga clic en cada opción de la familia de CPU";

/* efiMaker */
"Checking latest OpenCore Bootloader version..." = "Comprobación de la última versión de OpenCore Bootloader...";

/* efiMaker */
"Downloading Opencore Bootloader" = "Descargando la última versión de Opencore Bootloader";

/* efiMaker */
"Error while downloading Opencore Bootloader. Unable to continue." = "Error al descargar Opencore Bootloader. No se puede continuar.";

/* efiMaker */
"Downloading %@ configuration" = "Descargando configuración de %@ ";

/* efiMaker */
"Populating SMBIOS data for %@ configuration" = "Completar datos de configuración del SMBIOS para %@ ";

/* efiMaker */
"Error while downloading the configuration. Unable to continue." = "Error al descargar la configuración. No se puede continuar.";

/* efiMaker */
"Error while populating %@ key" = "Error al completar la clave %@ ";

/* efiMaker */
"Some keys have not been updated. Please update them manually." = "Algunas claves no se han actualizado. Por favor, actualícelas manualmente.";

/* efiMaker */
"Done! Opening folder at %@" = "Listo. Abriendo carpeta en %@";

/* efiMaker */
"Download SSDT" = "Descargar SSDT";

/* efiMaker */
"successfully downloaded" = "Descargado exitosamente";

/* efiMaker */
"Download SSDT Error" = "Error al descargar SSDT";

/* efiMaker */
"Downloading latest" = "Descargando los arcvhivos más recientes";

/* efiMaker */
"Download essential Kext" = "Descargando Kext esencial";

/* efiMaker */
"Download Kext Error" = "Error al descargar Kext";

/* efiMaker */
"Download Drivers" = "Descargar controladores";

/* efiMaker */
"Download Drivers Error" = "Error al descargar controladores";

/* efiMaker */
"Error during processing" = "Error durante el procesamiento";

/* efiMaker */
"For more information about %@ settings, click here" = "Para más información sobre la configuración de %@, pulse aquí";

/* efiMaker */
"For more information about %@ settings" = "Para más información sobre la configuración de %@";

/* efiMaker */
"click here" = "haga clic aquí";

/* efiMaker */
"Summary Information" = "Summary Information";

/* efiMaker */
"CPU Family selected" = "Familia de CPU seleccionada";

/* efiMaker */
"SMBIOS selected" = "SMBIOS seleccionado";

/* efiMaker */
"Configuration type selected" = "Tipo de configuración seleccionada";

/* efiMaker */
"Architecture type selected" = "Tipo de arquitectura seleccionada";

/* efiMaker*/
"Distribution mode selected" = "Modo de distribución seleccionado";

/* efiMaker */
"Download OpenCore Mod" = "Descargar OpenCore Mod";

/* efiMaker */
"Download related files" = "Descargar archivos relacionados";

/* opencoreDownloaderController */
"Building gettext tools. This process may take a while on some machines, so please be patient. If this process asking to install Java SDK, please just skip that message." = "Building gettext tools. This process may take a while on some machines, so please be patient. If this process asking to install Java SDK, please just skip that message.";

/* opencoreDownloaderController */
"GETTEXT is missing!, downloading..." = "¡Falta GETTEXT! , descargando...";

/* opencoreDownloaderController */
"Building GETTEXT..." = "Compilando GETTEXT...";

/* opencoreDownloaderController */
"Error while compiling resources for localization" = "Error al compilar recursos para la localización";

/* opencoreDownloaderController */
"Xcode Application needed." = "Aplicación Xcode necesaria.";

/* opencoreDownloaderController */
"Download XCode" = "Descargar XCode";

/* opencoreDownloaderController */
"In order to use this section, please install Xcode application." = "Para utilizar esta sección, instale la aplicación Xcode.";

/* opencoreDownloaderController */
"Start Building...." = "Comenzar a compilar....";

/* opencoreDownloaderController */
"This process may take a while on some machines, so please be patient." = "Este proceso puede tardar un poco en algunas máquinas, tenga paciencia por favor..";

/* opencoreDownloaderController */
"Error occurred during building OpenCorePkg" = "Se produjo un error al compilar OpenCorePkg";

/* opencoreDownloaderController */
"Operation aborted by user" = "Operación cancelada por el usuario";

/* themesDownloader */
"successfully downloaded and installed" = "descargado e instalado correctamente";

/* themesDownloader */
"Download: Please select a theme name!" = "Descargar: ¡Seleccione un nombre para el tema!";

/* themesDownloader */
"Update available for %@ theme" = "Actualización disponible para el tema %@";

/* themesDownloader */
"didn't pass the requirements check. For more information you need to open Themes Validator." = "didn't pass the requirements check. For more information you need to open Themes Validator.";

/* themesDownloader */
"Resources folder" = "Resources folder";

/* themesDownloader */
"Do you want open Themes Validator?" = "Do you want to open it?";

/* themesDownloader */
"Open Themes Validator" = "Open Themes Validator";

/* themesDownloader */
"Set as default" = "Set as default";

/* themesValidator */
"doesn't contain" = "doesn't contain";

/* themesValidator */
"this file is required." = "this file is required.";

/* themesValidator */
"Label folder doesn't contain" = "Label folder doesn't contain";

/* themesValidator */
"Font folder doesn't contain" = "Font folder doesn't contain";

/* themesValidator */
"OpenCanopy requires graphical resources located in Resources directory to run. There seem to be missing files. Sample resources (fonts, label and images) can be found in OcBinaryData repository, do you want to download it?" = "OpenCanopy requires graphical resources located in Resources directory to run. There seem to be missing files. Sample resources (fonts, labels and images) can be found in OcBinaryData repository, do you want to download it?";

/* themesValidator */
"Downloading OCBinaryData..." = "Downloading OCBinaryData...";

/* themesValidator */
"All resources have been successfully copied." = "All resources have been successfully copied.";

/* themesValidator */
"Fonts have been successfully copied." = "Fonts have been successfully copied.";

/* themesValidator */
"Labels have been successfully copied." = "Labels have been successfully copied.";

/* themesValidator */
"Images have been successfully copied." = "Images have been successfully copied.";

/* themesValidator */
"Starting validation for OC Resources folder" = "Starting validation for OC Resources folder";

/* themesValidator */
"Reason:" = "Reason:";

/* themesValidator */
"Label folder:" = "Label folder:";

/* themesValidator */
"Passed" = "Passed";

/* themesValidator */
"Not Passed" = "Not Passed";

/* themesValidator */
"Font folder:" = "Font folder:";

//---------------- TOOLTIPS---------------------------->>>>>>>>>>>>>>

/* acpiController */
/* Add */
/* 9ZU-zR-Tmy */
"TT_acpi_addTable" = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n2. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this ACPI table.\n\n3. Path\nType: plist string\nFailsafe: Empty\nDescription: File paths meant to be loaded as ACPI tables. Example values include DSDT.aml, SubDir/SSDT-8.aml, SSDT-USBX.aml, etc.\n\nACPI table load order follows the item order in the array. All ACPI tables load from OC/ACPI/Custom directory.\n\nNote: All tables apart from tables with a DSDT table identifier (determined by parsing data not by filename) insert new tables into the ACPI stack. DSDT tables perform a replacement of DSDT table instead.";

/* Delete */
/* 8sm-zn-vNl */
"TT_acpi_deleteTable" = "1. All\nType: plist boolean\nFailsafe: false (Only delete the first matched table)\nDescription: Set to true to delete all ACPI tables matching the condition.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to remove this ACPI table.\n4. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n5. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size to be equal to this value unless 0.\n6. TableSignature\nType: plist data, 4 bytes\nFailsafe: All zero (Match any table signature)\nDescription: Match table signature equal to this value.\n\nNote: Do not use table signatures when the sequence must be replaced in multiple places. This is particularly relevant when performing different types of renames.";

/* Patch */
/* 2tM-Ig-MFJ */
"TT_acpi_patchTable" = "1. Base\nType: plist string\nFailsafe: Empty (Ignored)\nDescription: Selects ACPI path base for patch lookup (or immediate replacement) by obtaining the offset to the provided path.\n\nOnly fully-qualified absolute paths are supported (e.g. \\_SB_.PCI0.GFX0). Currently supported object types are: Device, Field, Method.\n\nNote: Use with care, not all OEM tables can be parsed. Use ACPIe utility to debug. ACPIe compiled with DEBUG=1 make command produces helpful ACPI lookup tracing. \n\n2. BaseSkip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found Base occurrences to skip before finds and replacements are applied.\n\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n4. Count\nType: plist integer\nFailsafe: 0 (Apply patch to all occurrences found)\nDescription: Number of occurrences to patch.\n\n5. Enabled\nType: plist boolean\nDefauFailsafe: false\nDescription: Set to true to apply this ACPI patch.\n\n6. Find\nType: plist data\nFailsafe: Empty\nDescription: Data to find. Must be equal to Replace in size if set.\n\nNote: Can be empty, when Base is specified, immediate replacement after Base lookup happens in this case.\n\n7. Limit\nType: plist integer\nFailsafe: 0 (Search entire ACPI table)\nDescription: Maximum number of bytes to search for.\n\n8. Mask\nType: plist data\nDefauFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Replace in size if set.\n\n9. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n\n10. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n\n11. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n\n12. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.\n\n13. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size equal to this value.\n\n14. TableSignature\nType: plist data, 4 bytes (Match any table signature)\nFailsafe: All zero\nDescription: Match table signature equal to this value.";

/* Quirks */
/* xYB-OX-ce7 */
"TT_FadtEnableReset" = "Type: plist boolean\nFailsafe: false\nDescription: Provide reset register and flag in FADT table to enable reboot and shutdown.\n\nMainly required on legacy hardware and a few newer laptops. Can also fix power-button shortcuts. Not recommended unless required.";

/* eza-Xg-dPF */
"TT_NormalizeHeaders" = "Type: plist boolean\nFailsafe: false\nDescription: Cleanup ACPI header fields to workaround macOS ACPI implementation flaws that result in boot crashes. Reference: Debugging AppleACPIPlatform on 10.13 by Alex James (also known as theracermaster). The issue was fixed in macOS Mojave (10.14).";

/* iWF-dk-0VK */
"TT_RebaseRegions" = "Type: plist boolean\nFailsafe: false\nDescription: Attempt to heuristically relocate ACPI memory regions. Not recommended.\n\nACPI tables are often generated dynamically by the underlying firmware implementation. Among the position- independent code, ACPI tables may contain the physical addresses of MMIO areas used for device configuration, typically grouped by region (e.g. OperationRegion). Changing firmware settings or hardware configuration, upgrading or patching the firmware inevitably leads to changes in dynamically generated ACPI code, which sometimes results in the shift of the addresses in the aforementioned OperationRegion constructions.\n\nFor this reason, the application of modifications to ACPI tables is extremely risky. The best approach is to make as few changes as possible to ACPI tables and to avoid replacing any tables, particularly DSDT tables. When this cannot be avoided, ensure that any custom DSDT tables are based on the most recent DSDT tables or attempt to remove reads and writes for the affected areas.\n\nWhen nothing else helps, this option could be tried to avoid stalls at PCI Configuration Begin phase of macOS booting by attempting to fix the ACPI addresses. It is not a magic bullet however, and only works with the most typical cases. Do not use unless absolutely required as it can have the opposite effect on certain platforms and result in boot failures.";

/* u3f-B9-p1e */
"TT_ResetHwSig" = "Type: plist boolean\nFailsafe: false\nDescription: Reset FACS table HardwareSignature value to 0.\nThis works around firmware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation.";

/* 0zY-cF-e9r */
"TT_ResetLogoStatus" = "Type: plist boolean\nFailsafe: false\nDescription: Reset BGRT table Displayed status field to false.\nThis works around firmware that provide a BGRT table but fail to handle screen updates afterwards.";

"TT_SyncTableIds" = "Type: plist boolean\nFailsafe: false\nDescription: Sync table identifiers with the SLIC table.\n\nThis works around patched tables becoming incompatible with the SLIC table causing licensing issues in older Windows operating systems.";

/* booterController */
/* MmioWhitelist */
/* RWw-Gp-0A4 */
"TT_booter_mmioWhitelistTable" = "1. Address\nType: plist integer\nFailsafe: 0\nDescription: Exceptional MMIO address, which memory descriptor should be left virtualised (unchanged) by DevirtualiseMmio. This means that the firmware will be able to directly communicate with this memory region during operating system functioning, because the region this value is in will be assigned a virtual address.\n\nThe addresses written here must be part of the memory map, have EfiMemoryMappedIO type and EFI_MEMORY_RUNTIME attribute (highest bit) set. The debug log can be used to find the list of the candidates.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Exclude MMIO address from the devirtualisation procedure.";

/* oWj-qp-bH5 */
"TT_booter_patchTable" = "1. Arch\nType: plist string\nFailsafe: Any (Apply to any supported architecture)\nDescription: Booter patch architecture (i386, x86_64).\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Count\nType: plist integer\nFailsafe: 0 (Apply to all occurrences found)\nDescription: Number of patch occurrences to apply.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to activate this booter patch.\n5. Find\nType: plist data\nFailsafe: Empty\nDescription: Data to find. This must be equal to Replace in size if set.\n6. Identifier\nType: plist string\nFailsafe: Any (Match any booter)\nDescription: Apple for macOS booter (typically boot.efi); or a name with a suffix, such as  bootmgfw.efi for a specific booter.\n7. Limit\nType: plist integer\nFailsafe: 0 (Search the entire booter)\nDescription: Maximum number of bytes to search for.\n8. Mask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Find in size if set.\n9. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n10. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n11. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.";

/* Quirks */
/* bib-aL-YwI */
"TT_AllowRelocationBlock" = "Type: plist boolean\nFailsafe: false\nDescription: Allows booting macOS through a relocation block.\n\nThe relocation block is a scratch buffer allocated in the lower 4 GB used for loading the kernel and related structures by EfiBoot on firmware where the lower memory region is otherwise occupied by (assumed) non-runtime data. Right before kernel startup, the relocation block is copied back to lower addresses. Similarly, all the other addresses pointing to the relocation block are also carefully adjusted. The relocation block can be used when:\n• No better slide exists (all the memory is used)\n• slide=0 is forced (by an argument or safe mode)\n• KASLR (slide) is unsupported (this is macOS 10.7 or older)\n\nThis quirk requires ProvideCustomSlide to be enabled and typically also requires enabling AvoidRuntimeDefrag to function correctly. Hibernation is not supported when booting with a relocation block, which will only be used if required when the quirk is enabled.\n\nNote: While this quirk is required to run older macOS versions on platforms with used lower memory, it is not compatible with some hardware and macOS 11. In such cases, consider using EnableSafeModeSlide instead.";

/* ubm-2i-zPE */
"TT_AvoidRuntimeDefrag" = "Type: plist boolean\nFailsafe: false\nDescription: Protect from boot.efi runtime memory defragmentation.\n\nThis option fixes UEFI runtime services (date, time, NVRAM, power control, etc.) support on firmware that uses SMM backing for certain services such as variable storage. SMM may try to access memory by physical addresses in non-SMM areas but this may sometimes have been moved by boot.efi. This option prevents boot.efi from moving such data.\n\nNote: Most types of firmware, apart from Apple and VMware, need this quirk.";

"TT_ClearTaskSwitchBit" = "Type: plist boolean\nFailsafe: false\nDescription: Clear task switch bit during UEFI runtime services calls.\n\nThis quirk resolves FPU-related crashes in UEFI runtime services when using either the 32-bit kernel on a 64-bit UEFI implementation, or the 64-bit kernel on a 32-bit UEFI implementation by removing the task switch (TS) bit from CR0 register during their execution. These crashes occur if there is any FPU/SSE instruction usage in UEFI runtime services as XNU is unable to handle exceptions from mixed-mode code. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi.\n\nNote: This quirk should only be required when running older macOS versions when the 32-bit kernel is used on a 64-bit UEFI implementation, such as Microsoft Hyper-V.";

/* NUB-EN-5ql */
"TT_DevirtualiseMmio" = "Type: plist boolean\nFailsafe: false\nDescription: Remove runtime attribute from select MMIO regions.\n\nThis quirk reduces the stolen memory footprint in the memory map by removing the runtime bit for known memory regions. This quirk may result in an increase of KASLR slides available but without additional measures, it is not necessarily compatible with the target board. This quirk typically frees between 64 and 256 megabytes of memory, present in the debug log, and on some platforms, is the only way to boot macOS, which otherwise fails with allocation errors at the bootloader stage.\n\nThis option is useful on all types of firmware, except for some very old ones such as Sandy Bridge. On certain firmware, a list of addresses that need virtual addresses for proper NVRAM and hibernation functionality may be required. Use the MmioWhitelist section for this.";

/* Ssn-0z-qIb */
"TT_DisableSingleUser" = "Type: plist boolean\nFailsafe: false\nDescription: Disable single user mode.\n\nThis is a security option that restricts the activation of single user mode by ignoring the CMD+S hotkey and the -s boot argument. The behaviour with this quirk enabled is supposed to match T2-based model behaviour.\n\nNote: When Apple Secure Boot is enabled single user mode is always disabled.";

/* KE8-rd-Ty5 */
"TT_DisableVariableWrite" = "Type: plist boolean\nFailsafe: false\nDescription: Protect from macOS NVRAM write access.\nThis is a security option allowing one to restrict NVRAM access in macOS. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi.\n\nNote: This quirk can also be used as an ad hoc workaround for defective UEFI runtime services implementations that are unable to write variables to NVRAM and results in operating system failures.";

/* ELB-6s-GBW */
"TT_DiscardHibernateMap" = "Type: plist boolean\nFailsafe: false\nDescription: Reuse original hibernate memory map.\n\nThis option forces the XNU kernel to ignore a newly supplied memory map and assume that it did not change after waking from hibernation. This behaviour is required by Windows to work. Windows mandates preserving runtime memory size and location after S4 wake.\n\nNote: This may be used to workaround defective memory map implementations on older, rare legacy hardware. Examples of such hardware are Ivy Bridge laptops with Insyde firmware such as the Acer V3-571G. Do not use this option without a full understanding of the implications.";

/* qyH-8f-uTZ */
"TT_EnableSafeModeSlide" = "Type: plist boolean\nFailsafe: false\nDescription: Patch bootloader to have KASLR enabled in safe mode.\n\nThis option is relevant to users with issues booting to safe mode (e.g. by holding shift or with using the -x boot argument). By default, safe mode forces 0 slide as if the system was launched with the slide=0 boot argument.\n• This quirk attempts to patch the boot.efi file to remove this limitation and to allow using other values (from 1 to 255 inclusive).\n• This quirk requires enabling ProvideCustomSlide.\n\nNote: The need for this option is dependent on the availability of safe mode. It can be enabled when booting to safe mode fails.";

/* xH6-La-kRg */
"TT_EnableWriteUnprotector" = "Type: plist boolean\nFailsafe: false\nDescription: Permit write access to UEFI runtime services code.\n\nThis option bypasses RˆX permissions in code pages of UEFI runtime services by removing write protection (WP) bit from CR0 register during their execution. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi.\n\nNote: This quirk may potentially weaken firmware security. Please use RebuildAppleMemoryMap if the firmware supports memory attributes table (MAT). Refer to the OCABC: MAT support is 1/0 log entry to determine wheter MAT is supported.";

"TT_FixupAppleEfiImages" = "Type: plist boolean\nFailsafe: false\nDescription: Fix permissions and section errors in macOS boot.efi images.\n\nMac OS X boot.efi images contain WˆX permissions errors in all versions, and 10.4 and 10.5 32-bit versions also contain illegal overlapping sections. Modern, strict PE loaders will refuse to load such images unless additional mitigations are applied. The image loader which matters here is the one provided by the system firmware, or by OpenDuet if OpenDuet is providing the UEFI compatibility layer. Image loaders which enforce these stricter rules include the loader provided with current versions of OpenDuet, the loader in OVMF if compiled from audk, and possibly the image loaders of some very recent 3rd party firmware (e.g. Microsoft).\n\nThis quirk detects these issues and pre-processes such images in memory so that a stricter loader will accept them.\n\nOn a system with such a modern, stricter loader this quirk is required to load Mac OS X 10.4 to macOS 10.12, and is required for all newer macOS when SecureBootModel is set to Disabled.\n\nNote 1: The quirk is never applied during the Apple secure boot path for newer macOS. The Apple secure boot path in OpenCore includes its own separate mitigations for boot.efi WˆX issues.\n\nNote 2: When enabled, and when not processing for Apple secure boot, this quirk is applied to:\n\t• All images from Apple Fat binaries (32-bit and 64-bit versions in one image).\n\t• All Apple-signed images.\n\t• All images at \System\Library\CoreServices\boot.efi within their filesystem.\n\nNote 3: Pre-processing in memory is incompatible with UEFI secure boot, as the image loaded is not the image on disk, so you cannot sign files which are loaded in this way based on their original disk image contents. Certain firmware will offer to register the hash of new, unknown images for future secure boot - this would still work. On the other hand, it is not particularly realistic to want to start these early, insecure images with secure boot anyway.";

/* woE-nK-MFN */
"TT_ForceBooterSignature" = "Type: plist boolean\nFailsafe: false\nDescription: Set macOS boot-signature to OpenCore launcher.\n\nBooter signature, essentially a SHA-1 hash of the loaded image, is used by Mac EFI to verify the authenticity of the bootloader when waking from hibernation. This option forces macOS to use OpenCore launcher SHA-1 hash as a booter signature to let OpenCore shim hibernation wake on Mac EFI firmware.\n\nNote: OpenCore launcher path is determined from LauncherPath property.";

/* cTN-CD-c3M */
"TT_ForceExitBootServices" = "Type: plist boolean\nFailsafe: false\nDescription: Retry ExitBootServices with new memory map on failure.\n\nTry to ensure that the ExitBootServices call succeeds. If required, an outdated MemoryMap key argument can be used by obtaining the current memory map and retrying the ExitBootServices call.\n\nNote: The need for this quirk is determined by early boot crashes of the firmware. Do not use this option without a full understanding of the implications.";

/* 5Km-5w-nkl */
"TT_ProtectMemoryRegions" = "Type: plist boolean\nFailsafe: false\nDescription: Protect memory regions from incorrect access.\n\nSome types of firmware incorrectly map certain memory regions:\n• The CSM region can be marked as boot services code, or data, which leaves it as free memory for XNU kernel.\n• MMIO regions can be marked as reserved memory and stay unmapped. They may however be required to be accessible at runtime for NVRAM support.\n\nThis quirk attempts to fix the types of these regions, e.g. ACPI NVS for CSM or MMIO for MMIO.\n\nNote: The need for this quirk is determined by artifacts, sleep wake issues, and boot failures. This quirk is typically only required by very old firmware.";

/* VnZ-XI-LOq */
"TT_ProtectSecureBoot" = "Type: plist boolean \nFailsafe: false\nDescription: Protect UEFI Secure Boot variables from being written.\n\nReports security violation during attempts to write to db, dbx, PK, and KEK variables from the operating system.\n\nNote: This quirk attempts to avoid issues with NVRAM implementations with fragmentation issues, such as on the MacPro5,1 as well as on certain Insyde firmware without garbage collection or with defective garbage collection.";

/* 3fG-t6-MF7 */
"TT_ProtectUefiServices" = "Type: plist boolean \nFailsafe: false\nDescription: Protect UEFI services from being overridden by the firmware.\n\nSome modern firmware, including on virtual machines such as VMware, may update pointers to UEFI services during driver loading and related actions. Consequently, this directly obstructs other quirks that affect memory management, such as DevirtualiseMmio, ProtectMemoryRegions, or RebuildAppleMemoryMap, and may also obstruct other quirks depending on the scope of such.\n\nNote: On VMware, the need for this quirk may be determined by the appearance of the “Your Mac OS guest might run unreliably with more than one virtual core.” message.";

/* wGH-hP-xhD */
"TT_ProvideCustomSlide" = "Type: plist boolean\nFailsafe: false\nDescription: Provide custom KASLR slide on low memory.\n\nThis option performs memory map analysis of the firmware and checks whether all slides (from 1 to 255) can be used. As boot.efi generates this value randomly with rdrand or pseudo randomly rdtsc, there is a chance of boot failure when it chooses a conflicting slide. In cases where potential conflicts exist, this option forces macOS to select a pseudo random value from the available values. This also ensures that the slide= argument is never passed to the operating system (for security reasons).\n\nNote: The need for this quirk is determined by the OCABC: Only N/256 slide values are usable! message in the debug log.";

/* gi2-WY-dKJ */
"TT_ProvideMaxSlide" = "Type: plist integer\nFailsafe: 0\nDescription: Provide maximum KASLR slide when higher ones are unavailable.\n\nThis option overrides the maximum slide of 255 by a user specified value between 1 and 254 (inclusive) when ProvideCustomSlide is enabled. It is assumed that modern firmware allocates pool memory from top to bottom, effectively resulting in free memory when slide scanning is used later as temporary memory during kernel loading. When such memory is not available, this option stops the evaluation of higher slides.\n\nNote: The need for this quirk is determined by random boot failures when ProvideCustomSlide is enabled and the randomized slide falls into the unavailable range. When AppleDebug is enabled, the debug log typically contains messages such as AAPL: [EB|‘LD:LKC] } Err(0x9). To find the optimal value, append slide=X, where X is the slide value, to the boot-args and select the largest one that does not result in boot failures.";

/* JMF-hg-GgC */
"TT_RebuildAppleMemoryMap" = "Type: plist boolean\nFailsafe: false\nDescription: Generate Memory Map compatible with macOS.\n\nThe Apple kernel has several limitations on parsing the UEFI memory map:\n• The Memory map size must not exceed 4096 bytes as the Apple kernel maps it as a single 4K page. As some types of firmware can have very large memory maps, potentially over 100 entries, the Apple kernel will crash on boot.\n• The Memory attributes table is ignored. EfiRuntimeServicesCode memory statically gets RX permissions while all other memory types get RW permissions. As some firmware drivers may write to global variables at runtime, the Apple kernel will crash at calling UEFI runtime services unless the driver .data section has a EfiRuntimeServicesData type.\n• Apple kernel Memory map entry consolidation may work incorrectly for low memory descriptors, which are initially marked as preallocated by Apple kernel, but then may get consolidated and lose their preallocation status due to a bug. Since Apple kernel later frees low memory, this may result in use-after-free errors and various kinds of kernel panics at boot time. The issue was fixed in Mac OS X 10.7 kernel.\n\nTo workaround these limitations, this quirk applies memory attribute table permissions to the memory map passed to the Apple kernel and optionally attempts to unify contiguous slots of similar types if the resulting memory map exceeds 4 KB.\n\nNote 1: Since several types of firmware come with incorrect memory protection tables, this quirk often comes paired with SyncRuntimePermissions.\n\nNote 2 : The need for this quirk is determined by early boot failures. This quirk replaces EnableWriteUnprotector on firmware supporting Memory Attribute Tables (MAT).";

"TT_ResizeAppleGpuBars" = "Type: plist integer\nFailsafe: -1\nDescription: Reduce GPU PCI BAR sizes for compatibility with macOS.\n\nThis quirk reduces GPU PCI BAR sizes for Apple macOS up to the specified value or lower if it is unsupported. The specified value follows PCI Resizable BAR spec. While Apple macOS supports a theoretical 1 GB maximum, in practice all non-default values may not work correctly. For this reason the only supported value for this quirk is the minimal supported BAR size, i.e. 0. Use -1 to disable this quirk.\n\nFor development purposes one may take risks and try other values. Consider a GPU with 2 BARs:\n• BAR0 supports sizes from 256 MB to 8 GB. Its value is 4 GB.\n• BAR1 supports sizes from 2 MB to 256 MB. Its value is 256 MB.\n\nExample 1: Setting ResizeAppleGpuBars to 1 GB will change BAR0 to 1 GB and leave BAR1 unchanged.\nExample 2: Setting ResizeAppleGpuBars to 1 MB will change BAR0 to 256 MB and BAR0 to 2 MB.\nExample 3: Setting ResizeAppleGpuBars to 16 GB will make no changes.\n\nNote: See ResizeGpuBars quirk for general GPU PCI BAR size configuration and more details about the technology.";

/* l3S-mh-5k0 */
"TT_SetupVirtualMap" = "Type: plist boolean\nFailsafe: false\nDescription: Setup virtual memory at SetVirtualAddresses.\n\nSome types of firmware access memory by virtual addresses after a SetVirtualAddresses call, resulting in early boot crashes. This quirk workarounds the problem by performing early boot identity mapping of assigned virtual addresses to physical memory.\n\nNote1: The need for this quirk is determined by early boot failures.\n\nNote 2: This quirk is not compatible with 32-bit kernels.";

/* Ryj-m2-2MI */
"TT_SignalAppleOS" = "Type: plist boolean \nFailsafe: false \nDescription: Report macOS being loaded through OS Info for any OS. \n\nThis quirk is useful on Mac firmwares, which behaves differently for different OS. For example, it is supposed to enable Intel GPU in Windows and Linux in some dual-GPU MacBook models.";

/* ymv-yt-Lvn */
"TT_SyncRuntimePermissions" = "Type: plist boolean\nFailsafe: false\nDescription: Update memory permissions for the runtime environment.\n\nSome types of firmware fail to properly handle runtime permissions:\n• They incorrectly mark OpenRuntime as not executable in the memory map.\n• They incorrectly mark OpenRuntime as not executable in the memory attributes table.\n• They lose entries from the memory attributes table after OpenRuntime is loaded.\n• They mark items in the memory attributes table as read-write-execute.\n\nThis quirk attempts to update the memory map and memory attributes table to correct this.\n\nNote: The need for this quirk is indicated by early boot failures (e.g. halts at black screen), particularly in early boot of the Linux kernel. Only firmware released after 2017 is typically affected.";

/* devicesPropertiesController*/
/* Add */
/* ogK-XX-Zb9 */
"TT_devicesProperties_addTables" = "1. Add\nType: plist dict\nDescription: Sets device properties from a map (plist dict) of device paths to a map (plist dict) of variable names and their values in plist multidata format. \n\nNote 1: Device paths must be provided in canonic string format (e.g. PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)).\n\nNote 2: Existing properties will not be changed unless deleted in the DeviceProperties Delete section.";

/* Delete */
/* 1eh-jH-TX2 */
"TT_devicesProperties_deleteTables" = "2. Delete\nType: plist dict\nDescription: Removes device properties from a map (plist dict) of device paths to an array (plist array) of variable names in plist string format.\n\nNote: Currently, existing properties may only exist on firmware with DeviceProperties drivers (e.g. Apple).\nHence, there is typically no reason to delete variables unless a new driver has been installed.";

/* kernelController */
/* Add */
/* pIA-W6-XA0 */
"TT_kernel_addTable" = "1. Arch\nType: plist string\nFailsafe: Any (Apply to any supported architecture)\nDescription: Kext architecture (i386, x86_64).\n2. BundlePath\nType: plist string\nFailsafe: Empty\nDescription: Kext bundle path (e.g. Lilu.kext or MyKext.kext/Contents/PlugIns/MySubKext.kext).\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this kernel extension.\n5. ExecutablePath\nType: plist string\nFailsafe: Empty\nDescription: Kext executable path relative to bundle (e.g. Contents/MacOS/Lilu).\n6. MaxKernel\nType: plist string\nFailsafe: Empty\nDescription: Adds kernel extension on specified macOS version or older.\nKernel version can be obtained with uname -r command, and should look like 3 numbers separated by dots, for example 18.7.0 is the kernel version for 10.14.6.\n7. MinKernel\nType: plist string\nFailsafe: Empty\nDescription: Adds kernel extension on specified macOS version or newer.\n\nNote: Refer to Add MaxKernel description for matching logic.\n8. PlistPath\nType: plist string\nFailsafe: Empty\nDescription: Kext Info.plist path relative to bundle (e.g. Contents/Info.plist).";

/* Block */
/* 8UL-f2-RSc */
"TT_kernel_blockTable" = "1. Arch\nType: plist string\nFailsafe: Any (Apply to any supported architecture)\nDescription: Kext block architecture (i386, x86_64).\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this kernel extension.\n4. Identifier\nType: plist string\nFailsafe: Empty\nDescription: Kext bundle identifier (e.g. com.apple.driver.AppleTyMCEDriver).\n5. MaxKernel\nType: plist string\nFailsafe: Empty\nDescription: Blocks kernel extension on specified macOS version or older.\n\nNote: Refer to the Add MaxKernel description for matching logic.\n6. MinKernel\nType: plist string\nFailsafe: Empty\nDescription: Blocks kernel extension on specified macOS version or newer.\n7. Strategy\nType: plist string\nFailsafe: Disable (Forcibly make the kernel driver kmod startup code return failure)\nDescription: Determines the behaviour of kernel driver blocking.\n\nValid values:\n• Disable — Forcibly make the kernel driver kmod startup code return failure.\n• Exclude — Remove the kernel driver from the kernel cache by dropping plist entry and filling in zeroes.\n\nNote: It is risky to Exclude a kext that is a dependency of others.\n\nNote 2: At this moment Exclude is only applied to prelinkedkernel and newer mechanisms.\n\nNote 3: In most cases strategy Exclude requires the new kext to be injected as a replacement.";

/* Force */
/* p2g-8y-f45 */
"TT_kernel_forceTable" = "1. Arch\nType: plist string\nFailsafe: Any (Apply to any supported architecture)\nDescription: Kext architecture (i386, x86_64). \n2. BundlePath\nType: plist string\nFailsafe: Empty\nDescription: Kext bundle path (e.g. System\\Library \\Extensions \\IONetworkingFamily.kext).\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription:  Set to true to load this kernel extension from the system volume when not presen in the kernel cache.\n5. ExecutablePath\nType: plist string\nFailsafe: Empty\nDescription: Kext executable path relative to bundle (e.g. Contents/MacOS/IONetworkingFamily).\n6. Identifier\nType: plist string\nFailsafe: Empty\nDescription: Kext identifier to perform presence checking before adding (e.g. com.apple.iokit.IONetworkingFamily).\nOnly drivers which identifiers are not be found in the cache will be added.\n7. MaxKernel\nType: plist string\nFailsafe: Empty\nDescription: Adds kernel extension on specified macOS version or older.\nNote: Refer to Add Add MaxKernel description for matching logic.\n8. MinKernel\nType: plist string\nFailsafe: Empty\nDescription: Adds kernel extension on specified macOS version or newer.\nNote: Refer to Add Add MaxKernel description for matching logic.\n9. PlistPath\nType: plist string\nFailsafe: Empty\nDescription: Kext Info.plist path relative to bundle (e.g. Contents/Info.plist).";

/* Patch */
/* 9hf-l6-OjL */
"TT_kernel_patchTable" = "1. Arch\nType: plist string\nFailsafe: Any (Apply to any supported architecture)\nDescription: Kext patch architecture (i386, x86_64).\n2. Base\nType: plist string\nFailsafe: Empty (Ignored)\nDescription: Selects symbol-matched base for patch lookup (or immediate replacement) by obtaining the address of the provided symbol name.\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n4. Count\nType: plist integer\nFailsafe: 0\nDescription: Number of patch occurrences to apply. 0 applies the patch to all occurrences found.\n5. Enabled\nType: plist boolean\nFailsafe: false\nDescription: This kernel patch will not be used unless set to true.\n6. Find\nType: plist data\nFailsafe: Empty (Immediate replacement at Base)\nDescription: Data to find. Can be set to empty for immediate replacement at Base. Must be equal to Replace in size if set.\n7. Identifier\nType: plist string\nFailsafe: Empty\nDescription: Kext bundle identifier (e.g. com.apple.driver.AppleHDA) or kernel for kernel patch.\n8. Limit\nType: plist integer\nFailsafe: 0 (Search entire kext or kernel)\nDescription: Maximum number of bytes to search for.\n9. Mask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Replace in size if set.\n10. MaxKernel\nType: plist string\nFailsafe: Empty\nDescription: Patches data on specified macOS version or older.\nNote: Refer to Add MaxKernel description for matching logic.\n11. MinKernel\nType: plist string\nFailsafe: Empty\nDescription: Patches data on specified macOS version or newer.\nNote: Refer to Add MaxKernel description for matching logic.\n12. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n13. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n14. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.";

/* Emulate */
/* 7Jq-Yr-TQY */
"TT_Cpuid1Data" = "Type: plist data, 16 bytes\nFailsafe: All zero\nDescription: Sequence of EAX, EBX, ECX, EDX values to replace CPUID (1) call in XNU kernel.\n\nThis property primarily meets three requirements:\n• Enabling support for an unsupported CPU model . (e.g. Intel Pentium).\n• Enabling support for a CPU model that is not yet supported by a specific version of macOS (typically old versions).\n• Enabling XCPM support for an unsupported CPU variant.\n\nNote 1: It may also be the case that the CPU model is supported but there is no power management supported (e.g. virtual machines). In this case, MinKernel and MaxKernel can be set to restrict CPU virtualisation and dummy power management patches to the particular macOS kernel version.\n\nNote 2: Only the value of EAX, which represents the exact CPUID, typically needs to be accounted for and remaining bytes should left as zeroes. The byte order is Little Endian. For example, C3 06 03 00 stands for CPUID 0x0306C3 (Haswell).\n\nNote 3: For XCPM support it is recommended to use the following combinations. Be warned that one is required to set the correct frequency vectors matching the installed CPU.\n• Haswell-E (0x0306F2) to Haswell (0x0306C3):\n\tCpuid1Data: C3 06 03 00 00 00 00 00 00 00 00 00 00 00 00 00\n\tCpuid1Mask: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00\n• Broadwell-E (0x0406F1) to Broadwell (0x0306D4):\n\tCpuid1Data: D4 06 03 00 00 00 00 00 00 00 00 00 00 00 00 00\n\tCpuid1Mask: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00\n• Comet Lake U62 (0x0A0660) to Comet Lake U42 (0x0806EC):\n\tCpuid1Data: EC 06 08 00 00 00 00 00 00 00 00 00 00 00 00 00\n\tCpuid1Mask: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00\n• Rocket Lake (0x0A0670) to Comet Lake (0x0A0655): \n\tCpuid1Data: 55 06 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 \n\tCpuid1Mask: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00\n• Alder Lake (0x090672) to Comet Lake (0x0A0655):\n\tCpuid1Data: 55 06 0A 00 00 00 00 00 00 00 00 00 00 00 00 00\n\tCpuid1Mask: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00\n\nNote 4: Note that the following configurations are unsupported by XCPM (at least out of the box):\n• Consumer Ivy Bridge (0x0306A9) as Apple disabled XCPM for Ivy Bridge and recommends legacy power management for these CPUs. You will need to manually patch _xcpm_bootstrap to force should manually be patched to enforce XCPM on these CPUs instead of using this option.\n• Low-end CPUs (e.g. Haswell+ Pentium) as they are not supported properly by macOS.";

/* WQz-t0-GJT */
"TT_Cpuid1Mask" = "Type: plist data, 16 bytes\nFailsafe: All zero\nDescription: Bit mask of active bits in Cpuid1Data. \n\nWhen each Cpuid1Mask bit is set to 0, the original CPU bit is used, otherwise set bits take the value of Cpuid1Data.";

/* Wjh-w3-4g8 */
"TT_MinKernel" = "Type: plist string\nFailsafe: Empty string\nDescription: Emulates CPUID and applies DummyPowerManagement on specified macOS version or newer.\n\nNote: Refer to Add MaxKernel description for matching logic.";

/* SZI-EW-Tfa */
"TT_MaxKernel" = "Type: plist string\nFailsafe: Empty string\nDescription: Emulates CPUID and applies DummyPowerManagement on specified macOS version or older.\n\nNote: Refer to Add MaxKernel description for matching logic.";

/* vK8-Z1-ZOI */
"TT_DummyPowerManagement" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4-12\nDescription: Disables AppleIntelCpuPowerManagement.\n\nNote 1: This option is a preferred alternative to NullCpuPowerManagement.kext for CPUs without native power management driver in macOS.\n\nNote 2: While this option is typically needed to disable AppleIntelCpuPowerManagement on unsupported platforms, it can also be used to disable this kext in other situations (e.g. with Cpuid1Data left blank).";

/* Scheme */
"TT_CustomKernel" = "Type: plist boolean\nFailsafe: false\nDescription: Use customised kernel cache from the Kernels directory located at the root of the ESP partition.\n\nUnsupported platforms including Atom and AMD require modified versions of XNU kernel in order to boot. This option provides the possibility to using a customised kernel cache which contains such modifications from ESP partition.";

/* wLJ-kT-oLE */
"TT_FuzzyMatch" = "Type: plist boolean \nFailsafe: false \nDescription: Use kernelcache with different checksums when available.\n\nOn macOS 10.6 and earlier, kernelcache filename has a checksum, which essentially is adler32 from SMBIOS product name and EfiBoot device path. On certain firmware, the EfiBoot device path differs between UEFI and macOS due to ACPI or hardware specifics, rendering kernelcache checksum as always different.\n\nThis setting allows matching the latest kernelcache with a suitable architecture when the kernelcache without suffix is unavailable, improving macOS 10.6 boot performance on several platforms.";

/* zDQ-MU-J9A */
"TT_kernelArch" = "Type: plist string\nFailsafe: Auto (Choose the preferred architecture automatically)\nDescription: Prefer specified kernel architecture (i386, i386-user32, x86_64) when available.\n\nOn macOS 10.7 and earlier, the XNU kernel can boot with architectures different from the usual x86_64. This setting will use the specified architecture to boot macOS when it is supported by the macOS and the configuration:\n• i386 — Use i386 (32-bit) kernel when available.\n• i386-user32 — Use i386 (32-bit) kernel when available and force the use of 32-bit userspace on 64-bit capable processors if supported by the operating system.\n\t– On macOS, 64-bit capable processors are assumed to support SSSE3. This is not the case for older 64-bit capable Pentium processors, which cause some applications to crash on macOS 10.6. This behaviour corresponds to the -legacy kernel boot argument.\n\t– This option is unavailable on macOS 10.4 and 10.5 when running on 64-bit firmware due to an uninitialised 64-bit segment in the XNU kernel, which causes AppleEFIRuntime to incorrectly execute 64-bit code as 16-bit code.\n• x86_64 — Use x86_64 (64-bit) kernel when available.\n\nThe algorithm used to determine the preferred kernel architecture is set out below.\n(a) arch argument in image arguments (e.g. when launched via UEFI Shell) or in boot-args variable overrides any compatibility checks and forces the specified architecture, completing this algorithm.\n(b) OpenCore build architecture restricts capabilities to i386 and i386-user32 mode for the 32-bit firmware variant.\n(c) Determined EfiBoot version restricts architecture choice:\n\t• 10.4-10.5 — i386 or i386-user32 (only on 32-bit firmware) • 10.6 — i386, i386-user32, or x86_64\n\t• 10.7 — i386 or x86_64\n\t• 10.8 or newer — x86_64\n(d) If KernelArch is set to Auto and SSSE3 is not supported by the CPU, capabilities are restricted to i386-user32 if supported by EfiBoot.\n(e) Board identifier (from SMBIOS) based on EfiBoot version disables x86_64 support on an unsupported model if any i386 variant is supported. Auto is not consulted here as the list is not overridable in EfiBoot.\n(f) KernelArch restricts the support to the explicitly specified architecture (when not set to Auto) if the architecture remains present in the capabilities.\n(g) The best supported architecture is chosen in this order: x86_64, i386, i386-user32.\n\nUnlike macOS 10.7 (where certain board identifiers are treated as the i386 only machines), and macOS 10.5 or earlier (where x86_64 is not supported by the macOS kernel), macOS 10.6 is very special. The architecture choice on macOS 10.6 depends on many factors including not only the board identifier, but also the macOS product type (client vs server), macOS point release, and amount of RAM. The detection of all these is complicated and impractical, as several point releases had implementation flaws resulting in a failure to properly execute the server detection in the first place. For this reason, OpenCore on macOS 10.6 falls back on the x86_64 architecture whenever it is supported by the board, as it is on macOS 10.7.\n\nNote: 3+2 and 6+4 hotkeys to choose the preferred architecture are unsupported as they are handled by EfiBoot and hence, difficult to detect.";

/* ZjB-iQ-yjq */
"TT_kernelCache" = "Type: plist string\nFailsafe: Auto\nDescription: Prefer specified kernel cache type (Auto, Cacheless, Mkext, Prelinked) when available.\n\nDifferent variants of macOS support different kernel caching variants designed to improve boot performance.\nThis setting prevents the use of faster kernel caching variants if slower variants are available for debugging and stability reasons. That is, by specifying Mkext, Prelinked will be disabled for e.g. 10.6 but not for 10.7.\n\nNote: The first version (V1) of the 32-bit prelinkedkernel is unsupported due to the corruption of kext symbol tables by the tools. On this version, the Auto setting will block prelinkedkernel booting. This also results in the keepsyms=1 boot argument being non-functional for kext frames on these systems.";

/* Quirks*/
/* FUx-RJ-QTK */
"TT_AppleCpuPmCfgLock" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4\nDescription: Disables PKG_CST_CONFIG_CONTROL (0xE2) MSR modification in AppleIntelCPUPowerManage- ment.kext, commonly causing early kernel panic, when it is locked from writing.\n\nNote: AppleIntelCPUPowerManagement.kext is removed as of macOS 13. However, a legacy version can be injected and thus get patched using this quirk.\n\nSome types of firmware lock the PKG_CST_CONFIG_CONTROL MSR register and the bundled ControlMsrE2 tool can be used to check its state. Note that some types of firmware only have this register locked on some cores. As modern firmware provide a CFG Lock setting that allows configuring the PKG_CST_CONFIG_CONTROL MSR register lock, this option should be avoided whenever possible.\n\nOn APTIO firmware that do not provide a CFG Lock setting in the GUI, it is possible to access the option directly:\n(a) Download UEFITool and IFR-Extractor.\n(b) Open the firmware image in UEFITool and find CFG Lock unicode string. If it is not present, the firmware may not have this option and the process should therefore be discontinued.\n(c) Extract the Setup.bin PE32 Image Section (the UEFITool found) through the Extract Body menu option.\n(d) Run IFR-Extractor on the extracted file (e.g. ./ifrextract Setup.bin Setup.txt).\n(e) Find CFG Lock, VarStoreInfo (VarOffset/VarName): in Setup.txt and remember the offset right after it (e.g. 0x123).\n(f) Download and run Modified GRUB Shell compiled by brainsucker or use a newer version by datasone.\n(g) Enter setup_var 0x123 0x00 command, where 0x123 should be replaced by the actual offset, and reboot.\n\nWarning: Variable offsets are unique not only to each motherboard but even to its firmware version. Never ever try to use an offset without checking.\n\nOn selected platforms, the ControlMsrE2 tool can also change such hidden options. Pass desired argument: lock, unlock for CFG Lock. Or pass interactive to find and modify other hidden options.\n\nAs a last resort, consider patching the BIOS (for advanced users only).";

/* 677-hy-Blh */
"TT_AppleXcpmCfgLock" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.8 (not required for older)\nDescription: Disables PKG_CST_CONFIG_CONTROL (0xE2) MSR modification in XNU kernel, commonly causing early kernel panic, when it is locked from writing (XCPM power management).\nNote: This option should be avoided whenever possible. Refer to the AppleCpuPmCfgLock description for details.";

/* v6y-N9-uHT */
"TT_AppleXcpmExtraMsrs" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.8 (not required for older)\nDescription: Disables multiple MSR access critical for certain CPUs, which have no native XCPM support.\n\nThis is typically used in conjunction with the Emulate section on Haswell-E, Broadwell-E, Skylake-SP, and similar CPUs.\n\nNote: Additional not provided patches will be required for Ivy Bridge or Pentium CPUs. It is recommended to use AppleIntelCpuPowerManagement.kext for the former.";

/* cKa-I9-gvM */
"TT_AppleXcpmForceBoost" = "Type: plist boolean \nFailsafe: false\nRequirement: 10.8 (not required for older)\nDescription: Forces maximum performance in XCPM mode.\n\nThis patch writes 0xFF00 to MSR_IA32_PERF_CONTROL (0x199), effectively setting maximum multiplier for all the time.\n\nNote: While this may increase the performance, this patch is strongly discouraged on all systems but those explicitly dedicated to scientific or media calculations. Only certain Xeon models typically benefit from the patch.";

"TT_CustomPciSerialDevice" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.7\nDescription: Performs change of PMIO register base address on a customised PCI serial device.\n\nThe patch changes the PMIO register base address that the XNU kernel uses for serial input and output, from that of the default built-in COM1 serial port 0x3F8, to the base address stored in the first IO BAR of a specified PCI device or to a specific base address (e.g. 0x2F8 for COM2).\n\nNote: By default, serial logging is disabled. serial=3 boot argument, which enables serial input and output, should be used for XNU to print logs to the serial port.\n\nNote 2: In addition to this patch, kext Apple16X50PCI0 should be prevented from attaching to have kprintf method working properly. This can be achieved by using PCIeSerialDisable. In addition, for certain Thunderbolt cards the IOKit personality IOPCITunnelCompatible also needs to be set to true, which can be done by the PCIeSerialThunderboltEnable.kext.\n\nNote 3: For this patch to be correctly applied, Override must be enabled with all keys properly set in Custom, under section Misc->Serial.\n\nNote 4: This patch is for PMIO support and is therefore not applied if UseMmio under section Misc->Serial->Custom is false. For MMIO, there are boot arguments pcie_mmio_uart=ADDRESS and mmio_uart=ADDRESS that allow the kernel to use MMIO for serial port access.\n\nNote 5: The serial baud rate must be correctly set in both BaudRate under section Misc->Serial->Custom and via serialbaud=VALUE boot argument, both of which should match against each other. The default baud rate is 115200.";

/* alh-j7-rix */
"TT_CustomSMBIOSGuid" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4\nDescription: Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops.";

/* 6Aa-HL-hah */
"TT_DisableIoMapper" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.8 (not required for older)\nDescription: Disables IOMapper support in XNU (VT-d), which may conflict with the firmware implementation.\n\nNote 1: This option is a preferred alternative to dropping DMAR ACPI table and disabling VT-d in firmware preferences, which does not obstruct VT-d support in other systems in case they need this.\n\nNote 2: Misconfigured IOMMU in the firmware may result in broken devices such as ethernet or Wi-Fi adapters. For instance, an ethernet adapter may cycle in link-up link-down state infinitely and a Wi-Fi adapter may fail to discover networks. Gigabyte is one of the most common OEMs with these issues.";

"TT_DisableIoMapperMapping" = "Type: plist boolean\nFailsafe: false\nRequirement: 13.3 (not required for older)\nDescription: Disables mapping PCI bridge device memory in IOMMU (VT-d).\n\nThis option resolves compatibility issues with Wi-Fi, Ethernet and Thunderbolt devices when AppleVTD is enabled on systems where the native DMAR table contains one or more Reserved Memory Regions and more than 16 GB memory is installed. On some systems, this quirk is only needed when iGPU is enabled.\n\nNote 1: This quirk requires a native DMAR table that does not contain Reserved Memory Regions or a substitute SSDT-DMAR.aml in which Reserved Memory Regions have been removed.\n\nNote 2: This option is not needed on AMD systems.";

/* koV-S4-Tkn */
"TT_DisableLinkeditJettison" = "Type: plist boolean\nFailsafe: false\nRequirement: 11.0\nDescription: Disables __LINKEDIT jettison code.\n\nThis option lets Lilu.kext and possibly some other kexts, function in macOS Big Sur at their best performance levels without requiring the keepsyms=1 boot argument.";

/* RA3-U5-VwM */
"TT_DisableRtcChecksum" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4\nDescription: Disables primary checksum (0x58-0x59) writing in AppleRTC.\n\nNote 1: This option will not protect other areas from being overwritten, see RTCMemoryFixup kernel extension if this is desired.\n\nNote 2: This option will not protect areas from being overwritten at firmware stage (e.g. macOS bootloader), see AppleRtcRam protocol description if this is desired.";

/* XZ1-7z-v2l */
"TT_ExtendBTFeatureFlags" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.8-11\nDescription: Set FeatureFlags to 0x0F for full functionality of Bluetooth, including Continuity.\n\nNote: This option is a substitution for BT4LEContinuityFixup.kext, which does not function properly due to late patching progress.";

/* SGM-P1-Mz5 */
"TT_ExternalDiskIcons" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4\nDescription: Apply icon type patches to IOAHCIPort.kext to force internal disk icons for all AHCI disks.\n\nNote: This option should be avoided whenever possible. Modern firmware typically have compatible AHCI controllers.";

"TT_ForceAquantiaEthernet" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.15.4\nDescription: Enable Aquantia AQtion based 10GbE network cards support.\n\nThis option enables Aquantia AQtion based 10GbE network cards support, which used to work natively before macOS 10.15.4.\n\nNote: In order for Aquantia cards to properly function, DisableIoMapper must be disabled, DMAR ACPI table must not be dropped, and VT-d must be enabled in BIOS.\n\nNote2: While this patch should enable ethernet support for all Aquantia AQtion series, it has only been tested on AQC-107s based 10GbE network cards.\n\nNote 3: To address AppleVTD incompatibilities after applying this quirk, the Reserved Memory Region section of the corresponding device in the DMAR ACPI table might be removed. This table should be disassembled and be deleted. More details can be found at comment on commit 2441455.";

/* Y9I-V0-r5N */
"TT_ForceSecureBootScheme" = "Type: plist boolean\nFailsafe: false\nRequirement: 11.0\nDescription: Force x86 scheme for IMG4 verification.\n\nNote: This option is required on virtual machines when using SecureBootModel different from x86legacy.";

/* 8Db-Hu-t2R */
"TT_IncreasePciBarSize" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.10\nDescription: Allows IOPCIFamily to boot with 2 GB PCI BARs.\n\nNormally macOS restricts PCI BARs to 1 GB. Enabling this option (still) does not let macOS actually use PCI devices with larger BARs.\n\nNote: This option should be avoided whenever possible. A need for this option indicates misconfigured or defective firmware.";

/* nsg-T6-DJT */
"TT_LapicKernelPanic" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.6 (64-bit)\nDescription: Disables kernel panic on LAPIC interrupts.";

/* Bdo-0T-kr8 */
"TT_LegacyCommpage" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4 - 10.6\nDescription: Replaces the default 64-bit commpage bcopy implementation with one that does not require SSSE3, useful for legacy platforms. This prevents a commpage no match for last panic due to no available 64-bit bcopy functions that do not require SSSE3.";

/* axF-O3-KF9 */
"TT_PanicNoKextDump" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.13 (not required for older)\nDescription: Prevent kernel from printing kext dump in the panic log preventing from observing panic details. Affects 10.13 and above.";

/* 6Mq-wE-cHt */
"TT_PowerTimeoutKernelPanic" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.15 (not required for older)\nDescription: Disables kernel panic on setPowerState timeout.\nAn additional security measure was added to macOS Catalina (10.15) causing kernel panic on power change timeout for Apple drivers. Sometimes it may cause issues on misconfigured hardware, notably digital audio, which sometimes fails to wake up. For debug kernels setpowerstate_panic=0 boot argument should be used, which is otherwise equivalent to this quirk.";

"TT_ProvideCurrentCpuInfo" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.4 (10.14)\nDescription: Provides current CPU info to the kernel.\n\nThis quirk works differently depending on the CPU:\n• For Microsoft Hyper-V it provides the correct TSC and FSB values to the kernel, as well as disables CPU topology validation (10.8+).\n• For KVM and other hypervisors it provides precomputed MSR 35h values solving kernel panic with -cpu host.\n• For Intel CPUs it adds support for asymmetrical SMP systems (e.g. Intel Alder Lake) by patching core count to thread count along with the supplemental required changes (10.14+). Cache size and cache line size are also provided when using 10.4 as Intel Penryn and newer may only have cache information in CPUID leaf 0x4 which is unsupported by 10.4.";

/* yhV-cY-frg */
"TT_ThirdPartyDrives" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.6 (not required for older)\nDescription: Apply vendor patches to IOAHCIBlockStorage.kext to enable native features for third-party drives, such as TRIM on SSDs or hibernation support on 10.15 and newer.\nNote: This option may be avoided on user preference. NVMe SSDs are compatible without the change. For AHCI SSDs on modern macOS version there is a dedicated built-in utility called trimforce. Starting from 10.15 this utility creates EnableTRIM variable in APPLE_BOOT_VARIABLE_GUID namespace with 01 00 00 00 value.";

/* QzX-0b-2d3 */
"TT_XhciPortLimit" = "Type: plist boolean\nFailsafe: false\nRequirement: 10.11 (not required for older)\nDescription: Patch various kexts (AppleUSBXHCI.kext, AppleUSBXHCIPCI.kext, IOUSBHostFamily.kext) to remove USB port count limit of 15 ports.\n\nNote: This option should be avoided whenever possible. USB port limit is imposed by the amount of used bits in locationID format and there is no possible way to workaround this without heavy OS modification. The only valid solution is to limit the amount of used ports to 15 (discarding some).";

/* Ot6-tN-JLe */
"TT_SetApfsTrimTimeout" = "Type: plist integer\nFailsafe: -1\nRequirement: 10.14 (not required for older)\nDescription: Set trim timeout in microseconds for APFS filesystems on SSDs.\n\nThe APFS filesystem is designed in a way that the space controlled via the spaceman structure is either used or free. This may be different in other filesystems where the areas can be marked as used, free, and unmapped. All free space is trimmed (unmapped/deallocated) at macOS startup. The trimming procedure for NVMe drives happens in LBA ranges due to the nature of the DSM command with up to 256 ranges per command. The more fragmented the memory on the drive is, the more commands are necessary to trim all the free space.\n\nDepending on the SSD controller and the level of drive fragmenation, the trim procedure may take a considerable amount of time, causing noticeable boot slowdown. The APFS driver explicitly ignores previously unmapped areas and repeatedly trims them on boot. To mitigate against such boot slowdowns, the macOS driver introduced a timeout (9.999999 seconds) that stops the trim operation when not finished in time.\n\nOn several controllers, such as Samsung, where the deallocation process is relatively slow, this timeout can be reached very quickly. Essentially, it means that the level of fragmentation is high, thus macOS will attempt to trim the same lower blocks that have previously been deallocated, but never have enough time to deallocate higher blocks. The outcome is that trimming on such SSDs will be non-functional soon after installation, resulting in additional wear on the flash.\n\nOne way to workaround the problem is to increase the timeout to an extremely high value, which at the cost of slow boot times (extra minutes) will ensure that all the blocks are trimmed. Set this option to a high value, such as 4294967295 ensures that all blocks are trimmed. Alternatively, use over-provisioning, if supported, or create a dedicated unmapped partition where the reserve blocks can be found by the controller. Conversely, the trim operation can be mostly disabled by setting a very low timeout value, while 0 entirely disables it.\n\nNote: The failsafe value -1 indicates that this patch will not be applied, such that apfs.kext will remain untouched.\n\nNote 2: On macOS 12.0 and above, it is no longer possible to specify trim timeout. However, it can be disabled by setting 0.\n\nNote 3: Trim operations are only affected at booting phase when the startup volume is mounted. Either specifying timeout, or completely disabling trim with 0, will not affect normal macOS running.";

/* miscController */
/* Boot */
/* 5Or-M0-hZS */
"TT_pickermode" = "Type: plist string\nFailsafe: Builtin\nDescription: Choosepicker used for boot management.\n\nPickerMode describes the underlying boot management with an optional user interface responsible for handling boot options.\n\nThe following values are supported:\n• Builtin — boot management is handled by OpenCore, a simple text-only user interface is used.\n• External — an external boot management protocol is used if available. Otherwise, the Builtin mode is used.\n• Apple — Apple boot management is used if available. Otherwise, the Builtin mode is used.\n\nUpon success, the External mode may entirely disable all boot management in OpenCore except for policy enforcement. In the Apple mode, it may additionally bypass policy enforcement. Refer to the OpenCanopy plugin for an example of a custom user interface.\n\nThe OpenCore built-in picker contains a set of actions chosen during the boot process. The list of supported actions is similar to Apple BDS and typically can be accessed by holding action hotkeys during the boot process.\n\nThe following actions are currently considered:\n• Default — this is the default option, and it lets the built-in OpenCore picker load the default boot option as specified in the Startup Disk preference pane.\n• ShowPicker — this option forces the OpenCore picker to be displayed. This can typically be achieved by holding the OPT key during boot. Setting ShowPicker to true will make ShowPicker the default option.\n• BootApple — this options performs booting to the first Apple operating system found unless the chosen default operating system is one from Apple. Hold the X key down to choose this option.\n• BootAppleRecovery — this option performs booting into the Apple operating system recovery partition. This is either that related to the default chosen operating system, or first one found when the chosen default operating system is not from Apple or does not have a recovery partition. Hold the CMD+R hotkey combination down to choose this option.\n\nNote 1: On non-Apple firmware KeySupport, OpenUsbKbDxe, or similar drivers are required for key handling. However, not all of the key handling functions can be implemented on several types of firmware.\n\nNote 2: In addition to OPT, OpenCore supports using both the Escape and Zero keys to enter the OpenCore picker when ShowPicker is disabled. Escape exists to support co-existence with the Apple picker (including OpenCore Apple picker mode) and to support firmware that fails to report held OPT key, as on some PS/2 keyboards. In addition, Zero is provided to support systems on which Escape is already assigned to some other pre-boot firmware feature. In systems which do not require KeySupport, pressing and holding one of these keys from after power on until the picker appears should always be successful. The same should  apply when using KeySupport mode if it is correctly configured for the system, i.e. with a long enough KeyForgetThreshold. If pressing and holding the key is not successful to reliably enter the picker, multiple repeated keypresses may be tried instead.\n\nNote 3: On Macs with problematic GOP, it may be difficult to re-bless OpenCore if its bless status is lost. The BootKicker utility can be used to work around this problem, if set up as a Tool in OpenCore with FullNvramAccess enabled. It will launch the Apple picker, which allows selection of an item to boot next (with Enter), or next and from then on until the next change (with CTRL+Enter), as normal. After the selection is made, the system will reboot and the chosen entry will be booted.";

/* hdQ-rL-KAo */
"TT_pickerattributes" = "Type: plist integer\nFailsafe: 0\nDescription: Sets specific attributes the OpenCore picker.\n\nDifferent OpenCore pickers may be configured through the attribute mask containing OpenCore-reserved (BIT0~BIT15) and OEM-specific (BIT16~BIT31) values.\nCurrent OpenCore values include:\n• 0x0001 — OC_ATTR_USE_VOLUME_ICON, provides custom icons for boot entries:\n\tOpenCore will attempt loading a volume icon by searching as follows, and will fallback to the default icon on failure:\n\t\t– .VolumeIcon.icnsfileatPrebootvolumeinper-volumedirectory(/System/Volumes/Preboot/{GUID}/ when mounted at the default location within macOS) for APFS (if present).\n\t\t– .VolumeIcon.icns file at Preboot root (/System/Volumes/Preboot/, when mounted at the default location within macOS) for APFS (otherwise).,\n\t\t– .VolumeIcon.icns file at the volume root for other filesystems.\n\nNote 1: The Apple picker partially supports placing a volume icon file at the operating system’s Data volume root, /System/Volumes/Data/, when mounted at the default location within macOS. This approach is flawed: the file is neither accessible to OpenCanopy nor to the Apple picker when FileVault 2, which is meant to be the default choice, is enabled. Therefore, OpenCanopy does not attempt supporting Apple’s approach. A volume icon file may be placed at the root of the Preboot volume for compatibility with both OpenCanopy and the Apple picker, or use the Preboot per-volume location as above with OpenCanopy as a preferred alternative to Apple’s approach.\n\nNote 2: Be aware that using a volume icon on any drive overrides the normal OpenCore picker behaviour for that drive of selecting the appropriate icon depending on whether the drive is internal or external.\n\n• 0x0002 — OC_ATTR_USE_DISK_LABEL_FILE, use custom prerendered titles for boot entries from .disk_label (.disk_label_2x) file near next to the bootloader for all filesystems. These labels can be generated via the disklabel utility or the bless --folder {FOLDER_PATH} --label {LABEL_TEXT} command. When prerendered labels are disabled or missing, use label text in .contentDetails (or .disk_label.contentDetails) file next to bootloader if present instead, otherwise the entry name itself will be rendered.\n• 0x0004 — OC_ATTR_USE_GENERIC_LABEL_IMAGE, provides predefined label images for boot entries without custom entries. This may however give less detail for the actual boot entry.\n• 0x0008 — OC_ATTR_HIDE_THEMED_ICONS, prefers builtin icons for certain icon categories to match the theme style. For example, this could force displaying the builtin Time Machine icon. Requires OC_ATTR_USE_VOLUME_ICON.\n• 0x0010 — OC_ATTR_USE_POINTER_CONTROL, enables pointer control in the OpenCore picker when available.\n\tFor example, this could make use of mouse or trackpad to control UI elements.\n• 0x0020 — OC_ATTR_SHOW_DEBUG_DISPLAY, enable display of additional timing and debug information, in Builtin picker in DEBUG and NOOPT builds only.\n• 0x0040 — OC_ATTR_USE_MINIMAL_UI, use minimal UI display, no Shutdown or Restart buttons, affects OpenCanopy and builtin picker.\n• 0x0080 — OC_ATTR_USE_FLAVOUR_ICON, provides flexible boot entry content description, suitable for picking the best media across different content sets:\nWhen enabled, the entry icon in OpenCanopy and the audio assist entry sound in OpenCanopy and builtin boot picker are chosen by something called content flavour. To determine content flavour the following algorithm is used:\n– For a Tool the value is read from Flavour field.\n– For an automatically discovered entry, including for boot entry protocol entries such as those generated by the OpenLinuxBoot driver, it is read from the .contentFlavour file next to the bootloader, if present.\n– For a custom entry specified in the Entries section it is read from the .contentFlavour file next to the bootloader if Flavour is Auto, otherwise it is specified via the Flavour value itself.\n– If read flavour is Auto or there is no .contentFlavour, entry flavour is chosen based on the entry type (e.g. Windows automatically gets Windows flavour).\nThe Flavour value is a sequence of : separated names limited to 64 characters of printable 7-bit ASCII. This is designed to support up to approximately five names. Each name refers to a flavour, with the first name having the highest priority and the last name having the lowest priority. Such a structure allows describing an entry in a more specific way, with icons selected flexibly depending on support by the audio-visual pack. A missing audio or icon file means the next flavour should be tried, and if all are missing the choice happens based on the type of the entry. Example flavour values: BigSur:Apple, Windows10:Windows. OpenShell:UEFIShell:Shell.\nUsing flavours means that you can switch between icon sets easily, with the flavour selecting the best available icons from each set. E.g. specifying icon flavour Debian:Linux will use the icon Debian.icns if provided, then will try Linux.icns, then will fall back to the default for an OS, which is HardDrive.icns.\nThings to keep in mind:\n– ForsecurityreasonsExt<Flavour>.icnsand<Flavour>.icnsarebothsupported,andonlyExt<Flavour>.icns\nwill be used if the entry is on an external drive (followed by default fallback ExtHardDrive.icns). – Where both apply .VolumeIcon.icns takes precedence over .contentFlavour.\n– In order to allow icons and audio assist to work correctly for tools (e.g. for UEFI Shell), system default boot entry icons (see Docs/Flavours.md) specified in the Flavour setting for Tools or Entries will continue to apply even when flavour is disabled. Non-system icons will be ignored in this case. In addition, the flavours UEFIShell and NVRAMReset are given special processing, identifying their respective tools to apply correct audio-assist, default builtin labels, etc.\n– A list of recommended flavours is provided in Docs/Flavours.md.\n•0x0100 — OC_ATTR_USE_REVERSED_UI,reversepositionofShutdownandRestartbuttons,affectsOpenCanopy and builtin picker. The reversed setting matches older macOS, and since it was the previous default in OpenCore it may better match some custom backgrounds. Only applicable when OC_ATTR_USE_MINIMAL_UI is not set.\n• 0x0200 — OC_ATTR_REDUCE_MOTION, reduce password and menu animation in OpenCanopy, leaving only animations which communicate information not otherwise provided.\nNote: These same animations, plus additional animations whose information is provided by voice-over, are automatically disabled when PickerAudioAssist is enabled.";

/* gD0-Iz-n35 */
"TT_ConsoleAttributes" = "Type: plist integer\nFailsafe: 0\nDescription: Sets specific attributes for picker.\n\nThe text renderer supports colour arguments as a sum of foreground and background colours based on the UEFI specification. The value for black background and for black foreground, 0, is reserved.\n\nList of colour values and names:\n• 0x00 — EFI_BLACK\n• 0x01 — EFI_BLUE\n• 0x02 — EFI_GREEN\n• 0x03 — EFI_CYAN\n• 0x04 — EFI_RED\n• 0x05 — EFI_MAGENTA\n• 0x06 — EFI_BROWN\n• 0x07 — EFI_LIGHTGRAY\n• 0x08 — EFI_DARKGRAY\n• 0x09 — EFI_LIGHTBLUE\n• 0x0A — EFI_LIGHTGREEN\n• 0x0B — EFI_LIGHTCYAN\n• 0x0C — EFI_LIGHTRED\n• 0x0D — EFI_LIGHTMAGENTA \n• 0x0E — EFI_YELLOW\n• 0x0F — EFI_WHITE\n• 0x00 — EFI_BACKGROUND_BLACK\n• 0x10 — EFI_BACKGROUND_BLUE\n• 0x20 — EFI_BACKGROUND_GREEN\n• 0x30 — EFI_BACKGROUND_CYAN\n• 0x40 — EFI_BACKGROUND_RED\n• 0x50 — EFI_BACKGROUND_MAGENTA\n• 0x60 — EFI_BACKGROUND_BROWN\n• 0x70 — EFI_BACKGROUND_LIGHTGRAY\n\nNote: This option may not work well with the System text renderer. Setting a background different from black could help with testing GOP functionality.";

/* Zxi-ww-dWk */
"TT_Timeout" = "Type: plist integer, 32 bit\nFailsafe: 0\nDescription: Timeout in seconds in the OpenCore picker before automatic booting of the default boot entry. Set to 0 to disable.";

/* QGG-If-K71 */
"TT_TakeoffDelay" = "TakeoffDelay \nType: plist integer, 32 bit \nFailsafe: 0\nDescription: Delay in microseconds executed before handling the OpenCore picker startup and action hotkeys. \n\nIntroducing a delay may give extra time to hold the right action hotkey sequence to e.g. boot to recovery mode. most systems, the appearance of the initial boot logo is a good indication of the time from which hotkeys can be held down. Earlier than this, the key press may not be registered. On some platforms setting this option to at least 5000-10000 microseconds is also necessary to access action hotkeys at all due to the nature of the keyboard driver. If the boot chime is configured (see audio configuration options) then at the expense of slightly slower startup, an even longer delay of half to one second (500000-1000000) may be used to create behaviour similar to a real Mac, where the chime itself can be used as a signal for when hotkeys can be pressed. The boot chime is inevitably later in the boot sequence in OpenCore than on Apple hardware, due to the fact that non-native drivers have to be loaded and connected first. Configuring the boot chime and adding this longer additional delay can also be useful in systems where fast boot time and/or slow monitor signal synchronisation may cause the boot logo not to be shown at all on some boots or reboots.";

/* wPi-6s-R0s */
"TT_hibernatemode" = "Type: plist string\nFailsafe: None\nDescription: Hibernation detection mode. The following modes are supported:\n• None — Ignore hibernation state.\n• Auto — Use RTC and NVRAM detection.\n• RTC — Use RTC detection.\n• NVRAM — Use NVRAM detection.\n\nNote: If the firmware can handle hibernation itself (valid for Mac EFI firmware), then None should be specified to hand-off hibernation state as is to OpenCore.";

/* M7r-QM-SNm */
"TT_PickerVariant" = "Type: plist string\nFailsafe: Auto\nDescription: Choose specific icon set to be used for boot management.\n\nAn icon set is a directory path relative to Resources\\Image, where the icons and an optional manifest are located. It is recommended for the artists to use provide their sets in the Vendor\\Set format, e.g. Acidanthera\\GoldenGate.\nSample resources provided as a part of OcBinaryData repository provide the following icon set:\n• Acidanthera\\GoldenGate — macOS 11 styled icon set. • Acidanthera\\Syrah — macOS 10.10 styled icon set.\n• Acidanthera\\Chardonnay — macOS 10.4 styled icon set.\nFor convenience purposes there also are predefined aliases:\n• Auto — Automatically select one set of icons based on the DefaultBackground colour: Acidanthera\\GoldenGate for Syrah Black and Acidanthera\\Chardonnay for Light Gray.\n• Default — Acidanthera\\GoldenGate.";

/* PDS-bo-Qx8 */
"TT_PickerAudioAssist" = "Type: plist boolean\nFailsafe: false\nDescription: Enable screen reader by default in the OpenCore picker.\n\nFor the macOS bootloader, screen reader preference is set in the preferences.efires archive in the isVOEnabled.int32 file and is controlled by the operating system. For OpenCore screen reader support, this option is an independent equivalent. Toggling screen reader support in both the OpenCore picker and the macOS bootloader FileVault 2 login window can also be done by using the Command + F5 key combination.\n\nNote: The screen reader requires working audio support. Refer to the UEFI Audio Properties section for details.";

/* Yyf-Yd-yrP */
"TT_ShowPicker" = "Type: plist boolean\nFailsafe: false\nDescription: Show a simple picker to allow boot entry selection.";

"TT_HibernateSkipsPicker" = "Type: plist boolean\nFailsafe: false\nDescription: Do not show picker if waking from macOS hibernation.\n\nLimitations:\n\n• Only supports macOS hibernation wake, Windows and Linux are currently out of scope.\n\n• Should only be used on systems with reliable hibernation wake in macOS, otherwise users may not be able to visually see boot loops that may occur.\n\n• Highly recommended to pair this option with PollAppleHotKeys, allows to enter picker in case of issues with hibernation wake.\n\n• Visual indication for hibernation wake is currently out of scope.";

/* zgV-bT-EgH */
"TT_HideAuxiliary" = "Type: plist boolean\nFailsafe: false\nDescription: Set to true to hide auxiliary entries from the picker menu.\nAn entry is considered auxiliary when at least one of the following applies:\n• Entry is macOS recovery.\n• Entry is macOS Time Machine.\n• Entry is explicitly marked as Auxiliary.\n• Entry is system (e.g. Reset NVRAM).\n\nTo display all entries, the picker menu can be reloaded into “Extended Mode” by pressing the Spacebar key. Hiding auxiliary entries may increase boot performance on multi-disk systems.";

/* vvg-w7-KxC */
"TT_PollAppleHotKeys" = "Type: plist boolean\nFailsafe: false\nDescription: Enable modifier hotkey handling in the OpenCore picker.\n\nIn addition to action hotkeys, which are partially described in the PickerMode section and are typically handled by Apple BDS, modifier keys handled by the operating system bootloader (boot.efi) also exist. These keys allow changing the behaviour of the operating system by providing different boot modes.\n\nOn certain firmware, using modifier keys may be problematic due to driver incompatibilities. To workaround this problem, this option allows registering certain hotkeys in a more permissive manner from within the OpenCore picker. Such extensions include support for tapping on key combinations before selecting the boot item, and for reliable detection of Shift along with other keys instead of only pressing the Shift key when selecting the boot item, in order to work around the fact that hotkeys which are continuously held during boot cannot be reliably detected on many PS/2 keyboards.\n\nThis list of known modifier hotkeys includes:\n• CMD+C+MINUS — disable board compatibility checking.\n• CMD+K — boot release kernel, similar to kcsuffix=release.\n• CMD+S — single user mode.\n• CMD+S+MINUS — disable KASLR slide, requires disabled SIP.\n• CMD+V — verbose mode.\n• Shift+Enter, Shift+Index — safe mode, may be used in combination with CTRL+Enter, CTRL+Index.";

/* IqM-FZ-Tdv */
"TT_launcherOption" = "Type: plist string\nFailsafe: Disabled\nDescription: Register the launcher option in the firmware preferences for persistence.\n\nValid values:\n• Disabled — do nothing.\n• Full — create or update the top priority boot option in UEFI variable storage at bootloader startup.\n\t– For this option to work, RequestBootVarRouting is required to be enabled.\n• Short — create a short boot option instead of a complete one.\n\t– This variant is useful for some older types of firmware, typically from Insyde, that are unable to manage full device paths.\n• System — create no boot option but assume specified custom option is blessed.\n\t– This variant is useful when relying on ForceBooterSignature quirk and OpenCore launcher path management happens through bless utilities without involving OpenCore.\n\nThis option allows integration with third-party operating system installation and upgrades (which may overwrite the \\EFI\\BOOT\\BOOTx64.efi file). The BOOTx64.efi file is no longer used for bootstrapping OpenCore if a custom option is created. The custom path used for bootstrapping can be specified by using the LauncherPath option.\n\nNote 1: Some types of firmware may have NVRAM implementation flaws, no boot option support, or other incompatibilities. While unlikely, the use of this option may result in boot failures and should only be used exclusively on the boards known to be compatible. Refer to acidanthera/bugtracker#1222 for some known issues affecting Haswell and other boards.\n\nNote 2: While NVRAM resets executed from OpenCore would not typically erase the boot option created in Bootstrap, executing NVRAM resets prior to loading OpenCore will erase the boot option. Therefore, for significant implementation updates, such as was the case with OpenCore 0.6.4, an NVRAM reset should be executed with Bootstrap disabled after which it can be re-enabled.\n\nNote 3: Some versions of Intel Visual BIOS (e.g. on Intel NUC) have an unfortunate bug whereby if any boot option is added referring to a path on a USB drive, from then on that is the only boot option which will be shown when any USB drive is inserted. If OpenCore is started from a USB drive on this firmware with LauncherOption set to Full or Short, this applies and only the OpenCore boot entry will be seen afterwards, when any other USB is inserted (this highly non-standard BIOS behaviour affects other software as well). The best way to avoid this is to leave LauncherOption set to Disabled or System on any version of OpenCore which will be started from a USB drive on this firmware. If the problem has already occurred the quickest reliable fix is:\n• Enable the system UEFI Shell in Intel Visual BIOS\n• With power off, insert an OpenCore USB\n• Power up and select the system UEFI Shell\n• Since the system shell does not include bcfg, use the system shell to start OpenCore’s OpenShell (e.g. by entering the command FS2:\EFI\OC\Tools\OpenShell.efi , but you will need to work out which drive is correct for OpenCore and modify the drive number FS#: accordingly)\n• Within OpenShell, use bcfg boot dump to display the NVRAM boot options and then use bcfg boot rm # (where # is the number of the OpenCore boot entry) to remove the OpenCore entry.\n\nIt is alteratively possible to start OpenShell directly from the OpenCore boot menu, if you have a working configured OpenCore for the system. In that case, and if OpenCore has RequestBootVarRouting enabled, it will be necessary to run the command \EFI\OC\Tools\OpenControl.efi disable before using bcfg. (After OpenControl disable, it is necessary to either reboot or run OpenControl restore, before booting an operating system). It is also possible to use efibootmgr within Linux to remove the offending entry, if you have a working version of Linux on the machine. Linux must be started either not via OpenCore, or via OpenCore with RequestBootVarRouting disabled for this to work.";

/* Uqn-Ww-mAH */
"TT_LauncherPath" = "Type: plist string\nFailsafe: Default\nDescription: Launch path for the LauncherOption property.\n\nDefault points to OpenCore.efi. User specified paths, e.g. \\EFI\\SomeLauncher.efi, can be used to provide custom loaders, which are supposed to load OpenCore.efi themselves.";

"TT_InstanceIdentifier" = "Type: plist string\nFailsafe: Empty\nDescription: An optional identifier for the current instance of OpenCore.\n\nThis should typically be a short alphanumeric string. The current use of this value is to optionally target .contentVisibility files to specific instances of OpenCore, as explained in the Boot Algorithm section.";

/* DEBUG */
/* PwU-cB-LIO */
"TT_DisplayDelay" = "Type: plist integer\nFailsafe: 0\nDescription: Delay in microseconds executed after every printed line visible onscreen (i.e. console).";

/* omf-bH-d4v */
"TT_displaylevel" = "Type: plist integer, 64 bit\nFailsafe: 0\nDescription: EDK II debug level bitmask (sum) showed onscreen. Unless Target enables console (onscreen) printing, onscreen debug output will not be visible.\n\nThe following levels are supported:\n• 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. \n• 0x00000040 — DEBUG_INFO in DEBUG, NOOPT.\n• 0x00400000 — DEBUG_VERBOSE in custom builds.\n• 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE.";

"TT_LogModules" = "Type: plist string\nFailsafe: *\nDescription: Filter log entries by module.\n\nThis option filters logging generated by specific modules, both in the log and onscreen. Two modes are supported:\n\t• + — Positive filtering: Only present selected modules.\n\t• - — Negative filtering: Exclude selected modules.\n\nWhen multiple log line identifiers are selected, comma (,) should be used as the splitter. For instance, +OCCPU,OCA,OCB means only OCCPU, OCA, OCB should be logged, while -OCCPU,OCA,OCB indicates these modules should be filtered out (i.e. not logged). Since there may be lines in the log with no valid prefix (i.e. log lines which are not generated by parts of OpenCore, but by other loaded drivers) then the special module name question mark (?) can be included in the list to include (with positive filtering) or exclude (with negative filtering) these non-standard lines. When no + or - symbol is specified, positive filtering (+) will be used. * alone as the option value indicates all modules being logged.\n\nNote 1: Acronyms of libraries can be found in the Libraries section below.\n\nNote 2: Messages printed before the configuration of the log protocol cannot be filtered from the early on screen log, but on being de-buffered from the early log buffer, will be filtered as requested for other log targets.\n\nNote 3: To avoid missing key issues, warning and error log messages are not filtered.";

/* 2Vb-s2-Ejp */
"TT_target" = "Type: plist integer\nFailsafe: 0\nDescription: A bitmask (sum) of enabled logging targets. Logging output is hidden by default and this option must be set when such output is required, such as when debugging.\nThe following logging targets are supported:\n• 0x01 — Enable logging, otherwise all log is discarded.\n• 0x02 — Enable basic console (onscreen) logging.\n• 0x04 — Enable logging to Data Hub.\n• 0x08 — Enable serial port logging.\n• 0x10 — Enable UEFI variable logging.\n• 0x20 — Enable non-volatile UEFI variable logging.\n• 0x40 — Enable logging to file.\n• 0x80 (bit 7) — In combination with 0x40, enable faster but unsafe (see Warning 2 below) file logging.\n\nConsole logging prints less than the other variants. Depending on the build type (RELEASE, DEBUG, or NOOPT) different amount of logging may be read (from least to most).\n\nTo obtain Data Hub logs, use the following command in macOS (Note that Data Hub logs do not log kernel and kext patches):\nioreg -lw0 -p IODeviceTree | grep boot-log | sort | sed 's/.*<\\(.*\\)>.*/\\1/' | xxd -r -p\n\nUEFI variable log does not include some messages and has no performance data. To maintain system integrity, the log size is limited to 32 kilobytes. Some types of firmware may truncate it much earlier or drop completely if they have no memory. Using the non-volatile flag will cause the log to be written to NVRAM flash after every printed line.\nTo obtain UEFI variable logs, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-log | awk '{gsub(/%0d%0a%00/,\"\");gsub(/%0d%0a/,\"\\n\")}1'\n\nWarning 1: Certain firmware appear to have defective NVRAM garbage collection. As a result, they may not be able to always free space after variable deletion. Do not enable non-volatile NVRAM logging on such devices unless specifically required.\n\nWhile the OpenCore boot log already contains basic version information including build type and date, this information may also be found in the opencore-version NVRAM variable even when boot logging is disabled.\n\nFile logging will create a file named opencore-YYYY-MM-DD-HHMMSS.txt (in UTC) under the EFI volume root with log contents (the upper case letter sequence is replaced with date and time from the firmware). Please be warned that some file system drivers present in firmware are not reliable and may corrupt data when writing files through UEFI. Log writing is attempted in the safest manner and thus, is very slow. Ensure that DisableWatchDog is set to true when a slow drive is used. Try to avoid frequent use of this option when dealing with flash drives as large I/O amounts may speed up memory wear and render the flash drive unusable quicker.\n\nWarning 2: It is possible to enable fast file logging, which requires a fully compliant firmware FAT32 driver. On drivers with incorrect FAT32 write support (e.g. APTIO IV, but maybe others) this setting can result in corruption up to and including an unusable ESP filesystem, therefore be prepared to recreate the ESP partition and all of its contents if testing this option. This option can increase logging speed significantly on some suitable firmware, but may make little speed difference on some others.\n\nWhen interpreting the log, note that the lines are prefixed with a tag describing the relevant location (module) of the log line allowing better attribution of the line to the functionality.";

/* LCd-qL-7KC */
"TT_DisableWatchDog" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware may not succeed in booting the operating system quickly, especially in debug mode, which results the watchdog timer aborting the process. This option turns off the watchdog timer.";

/* fcn-ha-taM */
"TT_AppleDebug" = "Type: plist boolean\nFailsafe: false\nDescription: Enable writing the boot.efi debug log to the OpenCore log.\n\nNote: This option only applies to 10.15.4 and newer.";

/* 2lk-2r-hIW */
"TT_ApplePanic" = "Type: plist boolean\nFailsafe: false\nDescription: Save macOS kernel panic output to the OpenCore root partition.\n\nThe file is saved as panic-YYYY-MM-DD-HHMMSS.txt. It is strongly recommended to set the keepsyms=1 boot argument to see debug symbols in the panic log. In cases where it is not present, the kpdescribe.sh utility (bundled with OpenCore) may be used to partially recover the stacktrace.\n\nDevelopment and debug kernels produce more useful kernel panic logs. Consider downloading and installing the KernelDebugKit from developer.apple.com when debugging a problem. To activate a development kernel, the boot argument kcsuffix=development should be added. Use the uname -a command to ensure that the current loaded kernel is a development (or a debug) kernel.\n\nIn cases where the OpenCore kernel panic saving mechanism is not used, kernel panic logs may still be found in the /Library/Logs/DiagnosticReports directory.\n\nStarting with macOS Catalina, kernel panics are stored in JSON format and thus need to be preprocessed before passing to kpdescribe.sh:\ncat Kernel.panic | grep macOSProcessedStackshotData | python3 -c 'import json,sys;print(json.load(sys.stdin)[\"macOSPanicString\"])'";

/* eFH-QH-phT */
"TT_SysReport" = "Type: plist boolean\nFailsafe: false\nDescription: Produce system report on ESP folder.\n\nThis option will create a SysReport directory in the ESP partition unless already present. The directory will contain ACPI, SMBIOS, and audio codec dumps. Audio codec dumps require an audio backend driver to be loaded.\n\nNote: To maintain system integrity, the SysReport option is not available in RELEASE builds. Use a DEBUG build if this option is required.";

/* SECURITY */
/* QbL-ID-H0a */
"TT_HaltLevel" = "Type: plist integer, 64 bit\nFailsafe: 0x80000000 (DEBUG_ERROR)\nDescription: EDK II debug level bitmask (sum) causing CPU to halt (stop execution) after obtaining a message of HaltLevel. Possible values match DisplayLevel values.";

/* tmf-fU-Pjy */
"TT_exposesensitivedata" = "Type: plist integer\nFailsafe: 0x6\nDescription: Sensitive data exposure bitmask (sum) to operating system.\n• 0x01 — Expose the printable booter path as a UEFI variable.\n• 0x02 — Expose the OpenCore version as a UEFI variable.\n• 0x04 — Expose the OpenCore version in the OpenCore picker menu title.\n• 0x08 — Expose OEM information as a set of UEFI variables.\n\nThe exposed booter path points to OpenCore.efi or its booter depending on the load order. To obtain the booter path, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-path\n\nTo use booter path for mounting booter volume use the following command in macOS:\nu=$(nvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-path | sed 's/.*GPT,\\([^,]*\\),.*/\\1/'); \\ if [ \"$u\" != \"\" ]; then sudo diskutil mount $u ; fi\n\nTo obtain the current OpenCore version, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:opencore-version\nIf the OpenCore version is not exposed the variable will contain UNK-000-0000-00-00 sequence.\n\nTo obtain OEM information, use the following commands in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-product # SMBIOS Type1 ProductName\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-vendor # SMBIOS Type2 Manufacturer\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-board # SMBIOS Type2 ProductName";

/* VQF-Ne-GWu */
"TT_scanpolicy" = "Type: plist integer, 32 bit\nFailsafe: 0x10F0103\nDescription: Define operating system detection policy.\n\nThis value allows preventing scanning (and booting) untrusted sources based on a bitmask (sum) of a set of flags. As it is not possible to reliably detect every file system or device type, this feature cannot be fully relied upon in open environments, and additional measures are to be applied.\n\nThird party drivers may introduce additional security (and performance) consideratons following the provided scan policy. The active Scan policy is exposed in the scan-policy variable of 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102 GUID for UEFI Boot Services only.\n• 0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK, restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy. Hence, to avoid mounting of undesired file systems, drivers for such file systems should not be loaded. This bit does not affect DMG mounting, which may have any file system. Known file systems are prefixed with OC_SCAN_ALLOW_FS_.\n• 0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK, restricts scanning to only known device types defined as a part of this policy. It is not always possible to detect protocol tunneling, so be aware that on some systems, it may be possible for e.g. USB HDDs to be recognised as SATA instead. Cases like this must be reported.\nKnown device types are prefixed with OC_SCAN_ALLOW_DEVICE_.\n• 0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS, allows scanning of APFS file system.\n• 0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS, allows scanning of HFS file system.\n• 0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP, allows scanning of EFI System Partition file system.\n• 0x00000800 (bit 11) — OC_SCAN_ALLOW_FS_NTFS, allows scanning of NTFS (Msft Basic Data) file system.\n• 0x00001000 (bit 12) — OC_SCAN_ALLOW_FS_LINUX_ROOT, allows scanning of Linux Root file systems.\n• 0x00002000 (bit 13) — OC_SCAN_ALLOW_FS_LINUX_DATA, allows scanning of Linux Data file systems.\n• 0x00004000 (bit 14) — OC_SCAN_ALLOW_FS_XBOOTLDR, allows scanning the Extended Boot Loader Partition as defined by the Boot Loader Specification.\n• 0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA, allow scanning SATA devices.\n• 0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX, allow scanning SAS and Mac NVMe devices.\n• 0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI, allow scanning SCSI devices.\n• 0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME, allow scanning NVMe devices.\n• 0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI, allow scanning CD/DVD devices and old SATA.\n• 0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB, allow scanning USB devices.\n• 0x00400000 (bit 22) — OC_SCAN_ALLOW_DEVICE_FIREWIRE, allow scanning FireWire devices.\n• 0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD, allow scanning card reader devices.\n• 0x01000000 (bit 24) — OC_SCAN_ALLOW_DEVICE_PCI, allow scanning devices directly connected to PCI bus (e.g. VIRTIO).\n\nNote: Given the above description, a value of 0xF0103 is expected to do the following:\n• Permit scanning SATA, SAS, SCSI, and NVMe devices with APFS file systems.\n• Prevent scanning any devices with HFS or FAT32 file systems.\n• Prevent scanning APFS file systems on USB, CD, and FireWire drives.\n\nThe combination reads as:\n• OC_SCAN_FILE_SYSTEM_LOCK\n• OC_SCAN_DEVICE_LOCK\n• OC_SCAN_ALLOW_FS_APFS\n• OC_SCAN_ALLOW_DEVICE_SATA\n• OC_SCAN_ALLOW_DEVICE_SASEX\n• OC_SCAN_ALLOW_DEVICE_SCSI\n• OC_SCAN_ALLOW_DEVICE_NVME";

/* 0yA-ct-dgi */
"TT_ApECID" = "Type: plist integer, 64 bit\nFailsafe: 0\nDescription: Apple Enclave Identifier.\n\nSetting this value to any non-zero 64-bit integer will allow using personalised Apple Secure Boot identifiers. To use this setting, generate a random 64-bit number with a cryptographically secure random number generator. As an alternative, the first 8 bytes of SystemUUID can be used for ApECID, this is found in macOS 11 for Macs without the T2 chip.\n\nWith this value set and SecureBootModel valid (and not Disabled), it is possible to achieve Full Security of Apple Secure Boot.\n\nTo start using personalised Apple Secure Boot, the operating system must be reinstalled or personalised. Until the operating system is personalised, only macOS DMG recovery can be loaded. In cases where DMG recovery is missing, it can be downloaded by using the macrecovery utility and saved in com.apple.recovery.boot as explained in the Tips and Tricks section. Note that DMG loading needs to be set to Signed to use any DMG with Apple Secure Boot.\n\nTo personalise an existing operating system, use the bless command after loading to macOS DMG recovery. Mount the system volume partition, unless it has already been mounted, and execute the following command:\nbless bless --folder \"/Volumes/Macintosh HD/System/Library/CoreServices\" \\ --bootefi --personalize\n\nOn macOS 11 and newer the dedicated x86legacy model always uses ApECID. When this configuration setting is left as 0 first 8 bytes of system-id variable are used instead.\n\nOn macOS versions before macOS 11, which introduced a dedicated x86legacy model for models without the T2 chip, personalised Apple Secure Boot may not work as expected. When reinstalling the operating system, the macOS Installer from macOS 10.15 and older will often run out of free memory on the /var/tmp partition when trying to install macOS with the personalised Apple Secure Boot. Soon after downloading the macOS installer image, an Unable to verify macOS error message will appear.\n\nTo workaround this issue, allocate a dedicated RAM disk of 2 MBs for macOS personalisation by entering the following commands in the macOS recovery terminal before starting the installation:\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume HFS+ SecureBoot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/OSPersonalizationTemp\ndiskutil mount -mountpoint /var/tmp/OSPersonalizationTemp $disk";

/* QZk-2b-TCx */
"TT_vault" = "Type: plist string\nFailsafe: Secure\nDescription: Enables the OpenCore vaulting mechanism.\nValid values:\n• Optional — require nothing, no vault is enforced, insecure.\n• Basic — require vault.plist file present in OC directory. This provides basic filesystem integrity verification and may protect from unintentional filesystem corruption.\n• Secure — require vault.sig signature file for vault.plist in OC directory. This includes Basic integrity checking but also attempts to build a trusted bootchain.\n\nThe vault.plist file should contain SHA-256 hashes for all files used by OpenCore. The presence of this file is highly recommended to ensure that unintentional file modifications (including filesystem corruption) do not go unnoticed. To create this file automatically, use the create_vault.sh script. Notwithstanding the underlying file system, the path names and cases between config.plist and vault.plist must match.\n\nThe vault.sig file should contain a raw 256 byte RSA-2048 signature from a SHA-256 hash of vault.plist. The signature is verified against the public key embedded into OpenCore.efi.\n\nTo embed the public key, either one of the following should be performed:\n• Provide public key during the OpenCore.efi compilation in OpenCoreVault.c file.\n• Binary patch OpenCore.efi replacing zeroes with the public key between =BEGIN OC VAULT= and ==END OC VAULT== ASCII markers.\n\nThe RSA public key 520 byte format description can be found in Chromium OS documentation. To convert the\npublic key from X.509 certificate or from PEM file use RsaTool.\n\nThe complete set of commands to:\n• Create vault.plist.\n• Create a new RSA key (always do this to avoid loading old configuration).\n• Embed RSA key into OpenCore.efi.\n• Create vault.sig.\n\nCan look as follows:\ncd /Volumes/EFI/EFI/OC/path/to/create_vault.sh .\n/path/to/RsaTool -sign vault.plist vault.sig vault.pub\noff=$(($(strings -a -t d OpenCore.efi | grep \"=BEGIN OC VAULT=\" | cut -f1 -d' ')+16))\ndd of=OpenCore.efi if=vault.pub bs=1 seek=$off count=528 conv=notrunc\nrm vault.pub\n\nNote 1: While it may appear obvious, an external method is required to verify OpenCore.efi and BOOTx64.efi for secure boot path. For this, it is recommended to enable UEFI SecureBoot using a custom certificate and to sign OpenCore.efi and BOOTx64.efi with a custom key. More details on customising secure boot on modern firmware can be found in the Taming UEFI SecureBoot paper (in Russian).\n\nNote 2: Regardless of this option, vault.plist is always used when present, and both vault.plist and vault.sig are used and required when a public key is embedded into OpenCore.efi, and errors will abort the boot process in either case. Setting this option allows OpenCore to warn the user if the configuration is not as required to achieve an expected higher security level.";

/* KUQ-Na-LT4 */
"TT_dmgloading" = "Type: plist string\nFailsafe: Signed\nDefine Disk Image (DMG) loading policy used for macOS Recovery.\n\nValid values:\n• Disabled — loading DMG images will fail. The Disabled policy will still let the macOS Recovery load in most cases as typically, there are boot.efi files compatible with Apple Secure Boot. Manually downloaded DMG images stored in com.apple.recovery.boot directories will not load, however.\n• Signed — only Apple-signed DMG images will load. Due to the design of Apple Secure Boot, the Signed policy will let any Apple-signed macOS Recovery load regardless of the Apple Secure Boot state, which may not always be desired. While using signed DMG images is more desirable, verifying the image signature may slightly slow the boot time down (by up to 1 second).\n• Any — any DMG images will mount as normal filesystems. The Any policy is strongly discouraged and will result in boot failures when Apple Secure Boot is active.";

/* l6D-xS-M37 */
"TT_secureBootModel" = "Type: plist string \nFailsafe: Default\nDescription: Apple Secure Boot hardware model.\n\nSets Apple Secure Boot hardware model and policy. Specifying this value defines which operating systems will be bootable. Operating systems shipped before the specified model was released will not boot.\n\nValid values:\n• Default — Matching model for current SMBIOS.\n• Disabled — No model, Secure Boot will be disabled.\n• j137 — iMacPro1,1 (December 2017) minimum macOS 10.13.2 (17C2111)\n• j680 — MacBookPro15,1 (July 2018) minimum macOS 10.13.6 (17G2112)\n• j132 — MacBookPro15,2 (July 2018) minimum macOS 10.13.6 (17G2112)\n• j174 — Macmini8,1 (October 2018) minimum macOS 10.14 (18A2063)\n• j140k — MacBookAir8,1 (October 2018) minimum macOS 10.14.1 (18B2084)\n• j780 — MacBookPro15,3 (May 2019) minimum macOS 10.14.5 (18F132)\n• j213 — MacBookPro15,4 (July 2019) minimum macOS 10.14.5 (18F2058)\n• j140a — MacBookAir8,2 (July 2019) minimum macOS 10.14.5 (18F2058)\n• j152f — MacBookPro16,1 (November 2019) minimum macOS 10.15.1 (19B2093)\n• j160 — MacPro7,1 (December 2019) minimum macOS 10.15.1 (19B88)\n• j230k — MacBookAir9,1 (March 2020) minimum macOS 10.15.3 (19D2064)\n• j214k — MacBookPro16,2 (May 2020) minimum macOS 10.15.4 (19E2269)\n• j223 — MacBookPro16,3 (May 2020) minimum macOS 10.15.4 (19E2265)\n• j215 — MacBookPro16,4 (June 2020) minimum macOS 10.15.5 (19F96)\n• j185 — iMac20,1 (August 2020) minimum macOS 10.15.6 (19G2005)\n• j185f — iMac20,2 (August 2020) minimum macOS 10.15.6 (19G2005)\n• x86legacy — Macs and VMs without T2 chip minimum macOS 11.0.1 (20B29)\n\nWarning: Not all Apple Secure Boot models are supported on all hardware configurations.\n\nApple Secure Boot appeared in macOS 10.13 on models with T2 chips. Prior to macOS 12 PlatformInfo and SecureBootModel were independent, allowing Apple Secure Boot can be used with any SMBIOS with and without T2. Starting with macOS 12 SecureBootModel must match the SMBIOS Mac model. Default model derives the model based on SMBIOS board identifier, either set automatically via the Generic section or set manually via the SMBIOS section. If there is no board identifier override the model will be derived heuristically from OEM SMBIOS.\n\nSetting SecureBootModel to any valid value but Disabled is equivalent to Medium Security of Apple Secure Boot. The ApECID value must also be specified to achieve Full Security. Check ForceSecureBootScheme when using Apple Secure Boot on a virtual machine.\n\nNote that enabling Apple Secure Boot is demanding on invalid configurations, faulty macOS installations, and on unsupported setups.\n\nThings to consider:\n(a) As with T2 Macs, all unsigned kernel extensions as well as several signed kernel extensions, including NVIDIA Web Drivers, cannot be installed.\n(b) The list of cached kernel extensions may be different, resulting in a need to change the list of Added or Forced kernel extensions. For example, IO80211Family cannot be injected in this case.\n(c) System volume alterations on operating systems with sealing, such as macOS 11, may result in the operating system being unbootable. Do not try to disable system volume encryption unless Apple Secure Boot is disabled.\n(d) Boot failures might occur when the platform requires certain settings, but they have not been enabled because the associated issues were not discovered earlier. Be extra careful with IgnoreInvalidFlexRatio or HashServices.\n(e) Operating systems released before Apple Secure Boot was released (e.g. macOS 10.12 or earlier), will still boot until UEFI Secure Boot is enabled. This is so because Apple Secure Boot treats these as incompatible and they are then handled by the firmware (as Microsoft Windows is).\n(f) On older CPUs (e.g. before Sandy Bridge), enabling Apple Secure Boot might cause slightly slower loading (by up to 1 second).\n(g) As the Default value will increase with time to support the latest major released operating system, it is not recommended to use the ApECID and the Default settings together.\n(h) Installing macOS with Apple Secure Boot enabled is not possible while using HFS+ target volumes. This may include HFS+ formatted drives when no spare APFS drive is available.\n\nThe installed operating system may have sometimes outdated Apple Secure Boot manifests on the Preboot partition, resulting in boot failures. This is likely to be the case when an “OCB: Apple Secure Boot prohibits this boot entry, enforcing!” message is logged.\n\nWhen this happens, either reinstall the operating system or copy the manifests (files with .im4m extension, such as boot.efi.j137.im4m) from /usr/standalone/i386 to /Volumes/Preboot/<UUID>/System/Library/CoreServices. Here, <UUID> is the system volume identifier. On HFS+ installations, the manifests should be copied to /System/Library/CoreServices on the system volume.\n\nFor more details on how to configure Apple Secure Boot with UEFI Secure Boot, refer to the UEFI Secure Boot";

/* NCW-lH-X8S */
"TT_PasswordHash" = "Type: plist data 64 bytes\nFailsafe: all zero\nDescription: Password hash used when EnablePassword is set.";

/* pYq-Ve-K08 */
"TT_PasswordSalt" = "Type: plist data\nFailsafe: empty\nDescription: Password salt used when EnablePassword is set.";

/* 0sy-D3-AKk */
"TT_AuthRestart" = "Type: plist boolean\nFailsafe: false\nDescription: Enable VirtualSMC-compatible authenticated restart.\n\nAuthenticated restart is a way to reboot FileVault 2 enabled macOS without entering the password. A dedicated terminal command can be used to perform authenticated restarts: sudo fdesetup authrestart. It is also used when installing operating system updates.\n\nVirtualSMC performs authenticated restarts by splitting and saving disk encryption keys between NVRAM and RTC, which despite being removed as soon as OpenCore starts, may be considered a security risk and thus is optional.";

/* rQF-20-vFl */
"TT_AllowSetDefault" = "Type: plist boolean\nFailsafe: false\nDescription: Allow CTRL+Enter and CTRL+Index handling to set the default boot option in boot picker;\n\nNote 1: May be used in combination with Shift+Enter or Shift+Index when PollAppleHotKeys is enabled.\n\nNote 2: In order to support systems with unresponsive modifiers during preboot (which includes V1 and V2 KeySupport mode on some firmware) OpenCore also allows holding the =/+ key in order to trigger ‘set default’ mode.";

/* PbU-if-N7O */
"TT_EnablePassword" = "Type: plist boolean\nFailsafe: false\nDescription: Enable password protection to facilitate sensitive operations.\n\nPassword protection ensures that sensitive operations such as booting a non-default operating system (e.g. macOS recovery or a tool), resetting NVRAM storage, trying to boot into a non-default mode (e.g. verbose mode or safe mode) are not allowed without explicit user authentication by a custom password. Currently, password and salt are hashed with 5000000 iterations of SHA-512.\n\nNote: This functionality is still under development and is not ready for production environments.";

/* Nph-Bb-8b6 */
"TT_BlacklistAppleUpdate" = "Type: plist boolean\nFailsafe: false\nDescription: Ignore boot options trying to update Apple peripheral firmware (e.g. MultiUpdater.efi).\n\nNote: Certain operating systems, such as macOS Big Sur, are incapable of disabling firmware updates by using the run-efi-updater NVRAM variable.";

/* SERIAL */
"TT_Init" = "Type: plist boolean\nFailsafe: false\nDescription: Perform serial port initialisation.\n\nThis option will perform serial port initialisation within OpenCore prior to enabling (any) debug logging.\n\nRefer to the Debugging section for details.";

"TT_Override" = "Type: plist boolean\nFailsafe: false\nDescription: Override serial port properties. When this option is set to false, no keys from Custom will be overridden.\n\nThis option will override serial port properties listed in the Serial Custom Properties section below.";

/* SERIAL CUSTOM */

"TT_BaudRate" = "Type: plist integer\nFailsafe: 115200\nDescription: Set the baud rate for serial port.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialBaudRate defined in MdeModulePkg.dec.";

"TT_ClockRate" = "Type: plist integer\nFailsafe: 1843200\nDescription: Set the clock rate for serial port.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialClockRate defined in MdeModulePkg.dec.";

"TT_DetectCable" = "Type: plist boolean\nFailsafe: false\nDescription: Enable serial port cable detection.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialDetectCable defined in MdeModulePkg.dec.";

"TT_ExtendedTxFifoSize" = "Type: plist integer\nFailsafe: 64\nDescription: Set the extended transmit FIFO size for serial port.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialExtendedTxFifoSize defined in MdeModulePkg.dec.";

"TT_FifoControl" = "Type: plist integer\nFailsafe: 0x07\nDescription: Configure serial port FIFO Control settings.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialFifoControl defined in MdeModulePkg.dec.";

"TT_LineControl" = "Type: plist integer\nFailsafe: 0x07\nDescription: Configure serial port Line Control settings.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialLineControl defined in MdeModulePkg.dec.";

"TT_PciDeviceInfo" = "Type: plist data\nFailsafe: 0xFF\nDescription: Set PCI serial device information.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialPciDeviceInfo defined in MdeModulePkg.dec.\n\nNote: The maximum allowed size of this option is 41 bytes. Refer to acidanthera/bugtracker#1954 for more details.\n\nNote 2: This option can be set by running the FindSerialPort tool.";

"TT_RegisterAccessWidth" = "Type: plist integer\nFailsafe: 8\nDescription: Set serial port register access width.\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialRegisterAccessWidth defined in MdeModulePkg.dec.";

"TT_RegisterBase" = "Type: plist integer\nFailsafe: 0x03F8\nDescription: Set the base address of serial port registers.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialRegisterBase defined in MdeModulePkg.dec.";

"TT_RegisterStride" = "Type: plist integer\nFailsafe: 1\nDescription: Set the serial port register stride in bytes.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialRegisterStride defined in MdeModulePkg.dec.";

"TT_UseHardwareFlowControl" = "Type: plist boolean\nFailsafe: false\nDescription: Enable serial port hardware flow control.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialUseHardwareFlowControl defined in MdeModulePkg.dec.";

"TT_UseMmio" = "Type: plist boolean\nFailsafe: false\nDescription: Indicate whether the serial port registers are in MMIO space.\n\nThis option will override the value of gEfiMdeModulePkgTokenSpaceGuid.PcdSerialUseMmio defined in MdeModulePkg.dec.";

/* BLESSOVERRIDE */
/* E7L-MW-EuK */
"TT_misc_blessoverrideTable" = "Type: plist array\nDescription: Add custom scanning paths through bless model.\n\nDesigned to be filled with plist string entries containing absolute UEFI paths to customised bootloaders, for example, \\EFI\\debian\\grubx64.efi for Debian bootloader. This allows unusual boot paths to be automaticlly automatically discovered by the boot picker. Designwise they are equivalent to predefined blessed path, such as \\System\\Library\\CoreServices\\boot.efi or \\EFI\\Microsoft\\Boot\\bootmgfw.efi, but unlike predefined bless paths they have highest priority.";

/* ENTRIES */
/* 8Gl-6A-OsL */
"TT_misc_EntriesTable" = "1. Arguments\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used as boot arguments (load options) of the specified entry.\n2. Auxiliary\nType: plist boolean\nFailsafe: false\nDescription: Set to true to hide this entry when HideAuxiliary is also set to true. Press the Spacebar key to enter “Extended Mode” and display the entry when hidden.\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide a human readable reference for the entry. Whether this value is used is implementation defined.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true activate this entry.\n5. Flavour\nType: plist string\nFailsafe: Auto\nDescription: Specify the content flavour for this entry. See OC_ATTR_USE_FLAVOUR_ICON flag for documentation.\n6. Name\nType: plist string\nFailsafe: Empty\nDescription: Human readable entry name displayed in the OpenCore picker.\n7. Path\nType: plist string\nFailsafe: Empty\nDescription: Entry location depending on entry type.\n• Entries specify external boot options, and therefore take device paths in the Path key. Care should be exercised as these values are not checked. Example: PciRoot(0x0)/Pci(0x1,0x1)/.../\\EFI\\COOL.EFI\n• Tools specify internal boot options, which are part of the bootloader vault, and therefore take file relative to the OC/Tools directory. Example: OpenShell.efi.\n8. RealPath\nType: plist boolean\nFailsafe: false\nDescription: Pass full path to the tool when launching.\n\nThis should typically be disabled as passing the tool directory may be unsafe with tools that accidentally attempt to access files without checking their integrity. Reasons to enable this property may include cases where tools cannot work without external files or may need them for enhanced functionality such as memtest86 (for logging and configuration), or Shell (for automatic script execution).\n\nNote: This property is only valid for Tools and cannot be specified for Entries (is always true).\n9. TextMode\nType: plist boolean\nFailsafe: false\nDescription: Run the entry in text mode instead of graphics mode.\n\nThis setting may be beneficial for some older tools that require text output as all the tools are launched in graphics mode by default. Refer to the Output Properties section below for information on text modes.";

/* TOOLS */
/* eH6-nm-MdQ */
"TT_misc_toolsTable" = "1. Arguments\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used as boot arguments (load options) of the specified entry.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Auxiliary\nType: plist boolean\nFailsafe: false\nDescription: This entry will not be listed by default when HideAuxiliary is set to true.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: This tool will not be listed unless set to true.\n5. Flavour\nType: plist string\nFailsafe: Auto\nDescription: Specify the content flavour for this entry. See OC_ATTR_USE_FLAVOUR_ICON flag for documentation.\n6. FullNvramAccess\nType: plist boolean\nFailsafe: false\nDescription: Disable OpenRuntime NVRAM protection during usage of a tool.\n\nThis disables all of the NVRAM protections provided by OpenRuntime.efi, during the time a tool is in use. It should normally be avoided, but may be required for instance if a tool needs to access NVRAM directly without the redirections put in place by RequestBootVarRouting.\n\nNote: This option is only valid for Tools and cannot be specified for Entries (is always false).\n7. Name\nType: plist string\nFailsafe: Empty\nDescription: Human readable tool name displayed in boot picker.\n8. Path\nType: plist string\nFailsafe: Empty\nDescription: File path to select UEFI tool relative to OC/Tools directory.\n9. RealPath\nType: plist boolean\nFailsafe: false\nDescription: Pass full path to the tool when launching.\n\nPassing tool directory may be unsafe for tool accidentally trying to access files without checking their integrity and thus should generally be disabled. Reason to enable this property may include cases where tools cannot work without external files or may need them for better function (e.g. memtest86 for logging and configuration or Shell for automatic script execution).\n\nNote: This option is only valid for Tools. For Entries this property cannot be specified and is always true.\n\n10. TextMode\nType: plist boolean\nFailsafe: false\nDescription: Run the entry in text mode instead of graphics mode.\n\nThis setting may be benefitial to some older tools that require text output. By default all the tools are launched in graphics mode. Read more about text modes in the Output Properties section below.";

/* nvramController */
/* Add */
/* s0e-p0-A6y */
"TT_nvram_addTables" = "1. Add\nType: plist dict\nDescription: Sets NVRAM variables from a map (plist dict) of GUIDs to a map (plist dict) of variable names and their values in plist multidata format. GUIDs must be provided in canonic string format in upper or lower case (e.g. 8BE4DF61-93CA-11D2-AA0D-00E098032B8C).\n\nThe EFI_VARIABLE_BOOTSERVICE_ACCESS and EFI_VARIABLE_RUNTIME_ACCESS attributes of created variables are set. Variables will only be set if not present or deleted. That is, to overwrite an existing variable value add the variable name to the Delete section. This approach enables the provision of default values until the operating system takes the lead.\n\nNote: The implementation behaviour is undefined when the plist key does not conform to the GUID format.\n\nMandatory Variables\nWarning: These variables may be added by PlatformNVRAM or Generic subsections of PlatformInfo section. Using PlatformInfo is the recommend way of setting these variables.\nThe following variables are mandatory for macOS functioning:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures\n32-bit FirmwareFeatures. Present on all Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask\n32-bit FirmwareFeaturesMask. Present on all Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB\nBoardSerialNumber. Present on newer Macs (2013+ at least) to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM\nPrimary network adapter MAC address or replacement value. Present on newer Macs (2013+ at least) to avoid accessing special memory region, especially in boot.efi.\n\nRecommended Variables\nThe following variables are recommended for faster startup or other improvements:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:BridgeOSHardwareModel\nBridge OS hardware model variable used to propagate to IODT bridge-model by EfiBoot. Read by hw.target sysctl, used by SoftwareUpdateCoreSupport.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:csr-active-config\n32-bit System Integrity Protection bitmask. Declared in XNU source code in csr.h.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures\nCombined FirmwareFeatures and ExtendedFirmwareFeatures. Present on newer Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask\nCombined FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask. Present on newer Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID\nHardware BoardProduct (e.g. Mac-35C1E88140C3E6CF). Not present on real Macs, but used to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB\nHardware BoardSerialNumber. Override for MLB. Present on newer Macs (2013+ at least).\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM\nHardware ROM. Override for ROM. Present on newer Macs (2013+ at least).\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:SSN\nSerial number. Present on newer Macs (2013+ at least).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:prev-lang:kbd\nASCII string defining default keyboard layout. Format is lang-COUNTRY:keyboard, e.g. ru-RU:252 for Russian locale and ABC keyboard. Also accepts short forms: ru:252 or ru:0 (U.S. keyboard, compatible with 10.9). Full decoded keyboard list from AppleKeyboardLayouts-L.dat can be found here. Using non-latin keyboard on 10.14 will not enable ABC keyboard, unlike previous and subsequent macOS versions, and is thus not recommended in case 10.14 is needed.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:security-mode\nASCII string defining FireWire security mode. Legacy, can be found in IOFireWireFamily source code in IOFireWireController.cpp. It is recommended not to set this variable, which may speedup system startup. Setting to full is equivalent to not setting the variable and none disables FireWire security.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:UIScale\nOne-byte data defining boot.efi user interface scaling. Should be 01 for normal screens and 02 for HiDPI screens.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:ForceDisplayRotationInEFI 32-bit integer defining display rotation. Can be 0 for no rotation or any of 90, 180, 270 for matching rotation in degrees.\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:DefaultBackgroundColor Four-byte RGBA data defining boot.efi user interface background colour. Standard colours include BF BF BF 00 (Light Gray) and 00 00 00 00 (Syrah Black). Other colours may be set at user’s preference.";

/* tq7-BQ-JU5 */
"TT_nvramProperties_add_table" = "Other Variables\nThe following variables may be useful for certain configurations or troubleshooting:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args\nKernel arguments, used to pass configuration to Apple kernel and drivers. There are many arguments, which may be found by looking for the use of PE_parse_boot_argn function in the kernel or driver code. Some of the known boot arguments include:\n– acpi_layer=0xFFFFFFFF\n– acpi_level=0xFFFF5F (implies ACPI_ALL_COMPONENTS)\n– arch=i386 (force kernel architecture to i386, see KernelArch)\n– batman=VALUE (AppleSmartBatteryManager debug mask)\n– batman-nosmc=1 (disable AppleSmartBatteryManager SMC interface)\n– cpus=VALUE (maximum number of CPUs used)\n– debug=VALUE (debug mask)\n– io=VALUE (IOKit debug mask)\n– keepsyms=1 (show panic log debug symbols)\n– kextlog=VALUE (kernel extension loading debug mask)\n– nvram-log=1 (enables AppleEFINVRAM logs)\n– nv_disable=1 (disables NVIDIA GPU acceleration)\n– nvda_drv=1 (legacy way to enable NVIDIA web driver, removed in 10.12)\n– npci=0x2000 (legacy, disables kIOPCIConfiguratorPFM64)\n– lapic_dont_panic=1\n– slide=VALUE (manually set KASLR slide)\n– smcdebug=VALUE (AppleSMC debug mask)\n– -amd_no_dgpu_accel (alternative to WhateverGreen’s -radvesa for new GPUs)\n– -nehalem_error_disable\n– -no_compat_check (disable model checking on 10.7+)\n– -s (single mode)\n– -v (verbose mode)\n– -x (safe mode)\nThere are multiple external places summarising macOS argument lists: example 1, example 2.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg\nBooter arguments, similar to boot-args but for boot.efi. Accepts a set of arguments, which are hexadecimal 64-bit values with or without 0x. At different stages boot.efi will request different debugging (logging) modes (e.g. after ExitBootServices it will only print to serial). Several booter arguments control whether these requests\nwill succeed. The list of known requests is covered below: – 0x00 – INIT.\n– 0x01 – VERBOSE (e.g. -v, force console logging).\n– 0x02 – EXIT.\n– 0x03 – RESET:OK.\n– 0x04 – RESET:FAIL (e.g. unknown board-id, hibernate mismatch, panic loop, etc.). – 0x05 – RESET:RECOVERY.\n– 0x06 – RECOVERY.\n– 0x07 – REAN:START.\n– 0x08 – REAN:END.\n– 0x09 – DT (can no longer log to DeviceTree).\n– 0x0A – EXITBS:START (forced serial only).\n– 0x0B – EXITBS:END (forced serial only).\n– 0x0C – UNKNOWN.\nIn 10.15 debugging support was mostly broken before 10.15.4 due to some kind of refactoring and introduction of a new debug protocol. Some of the arguments and their values below may not be valid for versions prior to 10.15.4. The list of known arguments is covered below:\n– boot-save-log=VALUE — debug log save mode for normal boot.\n∗ 0\n∗ 1\n∗ 2 — (default).\n∗ 3\n∗ 4 — (save to file).\n– wake-save-log=VALUE — debug log save mode for hibernation wake.\n∗ 0 — disabled.\n∗ 1\n∗ 2 — (default).\n∗ 3 — (unavailable).\n∗ 4 — (save to file, unavailable).\n– breakpoint=VALUE — enables debug breaks (missing in production boot.efi).\n∗ 0 — disables debug breaks on errors (default).\n∗ 1 — enables debug breaks on errors.\n– console=VALUE — enables console logging.\n∗ 0 — disables console logging.\n∗ 1 — enables console logging when debug protocol is missing (default).\n∗ 2 — enables console logging unconditionally (unavailable).\n– embed-log-dt=VALUE — enables DeviceTree logging.\n∗ 0 — disables DeviceTree logging (default).\n∗ 1 — enables DeviceTree logging.\n– kc-read-size=VALUE — Chunk size used for buffered I/O from network or disk for prelinkedkernel reading and related. Set to 1MB (0x100000) by default, can be tuned for faster booting.\n– log-level=VALUE — log level bitmask.\n∗ 0x01 — enables trace logging (default).\n– serial=VALUE — enables serial logging.\n∗ 0 — disables serial logging (default).\n∗ 1 — enables serial logging for EXITBS:END onwards.\n∗ 2 — enables serial logging for EXITBS:START onwards.\n∗ 3 — enables serial logging when debug protocol is missing.\n∗ 4 — enables serial logging unconditionally.\n– timestamps=VALUE — enables timestamp logging.\n∗ 0 — disables timestamp logging.\n∗ 1 — enables timestamp logging (default).\n– log=VALUE — deprecated starting from 10.15.\n∗ 1 — AppleLoggingConOutOrErrSet/AppleLoggingConOutOrErrPrint (classical ConOut/StdErr)\n∗ 2 — AppleLoggingStdErrSet/AppleLoggingStdErrPrint (StdErr or serial?)\n∗ 4 — AppleLoggingFileSet/AppleLoggingFilePrint (BOOTER.LOG/BOOTER.OLD file on EFI partition) – debug=VALUE — deprecated starting from 10.15.\n∗ 1 — enables print something to BOOTER.LOG (stripped code implies there may be a crash)\n∗ 2 — enables perf logging to /efi/debug-log in the device three\n∗ 4 — enables timestamp printing for styled printf calls\n– level=VALUE — deprecated starting from 10.15. Verbosity level of DEBUG output. Everything but 0x80000000 is stripped from the binary, and this is the default value.\nNote: To see verbose output from boot.efi on modern macOS versions enable AppleDebug option. This will save the log to general OpenCore log. For versions before 10.15.4 set bootercfg to log=1. This will print verbose output onscreen.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg-once\nBooter arguments override removed after first launch. Otherwise equivalent to bootercfg.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:csr-data\nSpecify sources of kexts which will be approved regardless of SIP CSR_ALLOW_UNAPPROVED_KEXTS value.\nExample contents:\n<dict><key>kext-allowed-teams</key><array><string>{DEVELOPER-TEAM-ID}</string></array></dict>\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:efiboot-perf-record\nEnable performance log saving in boot.efi. Performance log is saved to physical memory and is pointed by efiboot-perf-record-data and efiboot-perf-record-size variables. Starting from 10.15.4 it can also be saved to OpenCore log by AppleDebug option.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:fmm-computer-name Current saved host name. ASCII string.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:nvda_drv\nNVIDIA Web Driver control variable. Takes ASCII digit 1 or 0 to enable or disable installed driver.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:run-efi-updater \nOverride EFI firmware updating support in macOS (MultiUpdater, ThorUtil, and so on). Setting this to No or alternative boolean-castable value will prevent any firmware updates in macOS starting with 10.10 at least.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:StartupMute\nMute startup chime sound in firmware audio support. 8-bit integer. The value of 0x00 means unmuted. Missing variable or any other value means muted. This variable only affects Gibraltar machines (T2).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:SystemAudioVolume\nSystem audio volume level for firmware audio support. 8-bit integer. The bit of 0x80 means muted. Lower The remaining bits are used to encode the raw amplifier gain setting to be applied to the audio amplifier in use. Exactly what this value means depends on the codec (and potentially on the specific amplifier within the codec). This value is capped by macOS to the MaximumBootBeepVolume AppleHDA layout value, to avoid over-loud audio playback in the firmware.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:SystemAudioVolumeDB\nCurrent system audio volume level in decibels (dB). The value is a signed byte representing the audio offset (gain if positive, attentuation if negative) in dB relative to the amplifier reference value of 0 dB. Exactly which volume level is represented by 0 dB depends on the codec (and potentially on the specific amplifier within the codec) but it is normally at or near the maximum available amplifier volume. Typical values of this variable range from approximately -60 (the exact value depends on the audio hardware) up to exactly 0. On non-typical audio hardware, the value may go above zero.\nNote: Unlike SystemAudioVolume, this value is not capped.";

/* Delete*/
/* ph9-2g-adH */
"TT_nvram_deleteTables" = "2. Delete\nType: plist dict\nDescription: Removes NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.";

/* LegacySchema */
/* cVF-o8-z0z */
"TT_nvram_legacySchemaTables" = "3. LegacySchema\nType: plist dict\nDescription: Allows setting certain NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\n* value can be used to accept all variables for certain GUID.\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args or csr-active-config, as this can bypass SIP.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.\n\nWARNING: Choose variables carefully, as the nvram.plist file is not vaulted. For instance, do not include boot-args\nor csr-active-config, as these can be used to bypass SIP.";

/* Bqu-cW-189 */
"TT_LegacyOverwrite" = "Type: plist boolean\nFailsafe: false\nDescription: Permits overwriting firmware variables from nvram.plist.\nNote: Only variables accessible from the operating system will be overwritten.";

/* 0qd-Qe-41F */
"TT_WriteFlash" = "Type: plist boolean \nFailsafe: false \nDescription: Enables writing to flash memory for all added variables. \n\nNote: This value should be enabled on most types of firmware but is left configurable to account for firmware that may have issues with NVRAM variable storage garbage collection or similar.";

/* platformInfoController */
/* RfW-jb-UfW */
"TT_Automatic" = "Type: plist boolean\nFailsafe: false\nDescription: Generate PlatformInfo based on the Generic section instead of using values from DataHub, NVRAM, and SMBIOS sections.\nEnabling this option is useful when Generic section is flexible enough:\n• When enabled SMBIOS, DataHub, and PlatformNVRAM data is unused.\n• When disabled Generic section is unused.\n\nWarning: Setting this option to false is strongly discouraged when intending to update platform information. A false setting is typically only valid for minor corrections to SMBIOS values on legacy Apple hardware. In all other cases, setting Automatic to false may lead to hard-to-debug errors resulting from inconsistent or invalid settings.";

/* XRB-18-dHU */
"TT_UpdateDataHub" = "Type: plist boolean\nFailsafe: false\nDescription: Update Data Hub fields. These fields are read from the Generic or DataHub sections depending on the setting of the Automatic property.\n\nNote: The implementation of the Data Hub protocol in EFI firmware on virtually all systems, including Apple hardware, means that existing Data Hub entries cannot be overridden. New entries are added to the end of the Data Hub instead, with macOS ignoring old entries. This can be worked around by replacing the Data Hub protocol using the ProtocolOverrides section. Refer to the DataHub protocol override description for details.";

/* zXC-sw-kEf */
"TT_UpdateNVRAM" = "Type: plist boolean\nFailsafe: false\nDescription: Update NVRAM fields related to platform information.\n\nThese fields are read from the Generic or PlatformNVRAM sections depending on the setting of the Automatic property. All the other fields are to be specified with the NVRAM section.\n\nIf UpdateNVRAM is set to false, the aforementioned variables can be updated with the NVRAM section. If UpdateNVRAM is set to true, the behaviour is undefined when any of the fields are present in the NVRAM section.";

/* U5f-5A-ryt */
"TT_UpdateSMBIOS" = "Type: plist boolean\nFailsafe: false\nDescription: Update SMBIOS fields. These fields are read from the Generic or SMBIOS sections depending on the setting of the Automatic property.";

/* 9o2-8y-dq6 */
"TT_updatesmbiosmode" = "Type: plist string\nFailsafe: Auto\nDescription: Update SMBIOS fields approach:\n\n• TryOverwrite — Overwrite if new size is <= than the page-aligned original and there are no issues with legacy region unlock. Create otherwise. Has issues on some types of firmware.\n• Create — Replace the tables with newly allocated EfiReservedMemoryType at AllocateMaxAddress without any fallbacks.\n• Overwrite — Overwrite existing gEfiSmbiosTableGuid and gEfiSmbiosTable3Guid data if it fits new size. Abort with unspecified state otherwise.\n• Custom — WriteSMBIOStables(gEfiSmbios(3)TableGuid)togOcCustomSmbios(3)TableGuidtoworkaround firmware overwriting SMBIOS contents at ExitBootServices. Otherwise equivalent to Create. Requires patch-ing AppleSmbios.kext and AppleACPIPlatform.kext to read from another GUID: \"EB9D2D31\" - \"EB9D2D35\" (in ASCII), done automatically by CustomSMBIOSGuid quirk.\n\nNote: A side effect of using the Custom approach that it makes SMBIOS updates exclusive to macOS, avoiding a collision with existing Windows activation and custom OEM software but potentially obstructing the operation of Apple-specific tools.";

/* GZV-Yr-hPJ */
"TT_CustomMemory" = "Type: plist boolean\nFailsafe: false\nDescription: Use custom memory configuration defined in the Memory section. This completely replaces any existing memory configuration in SMBIOS, and is only active when UpdateSMBIOS is set to true.";

/* 1BR-wt-792 */
"TT_UseRawUuidEncoding" = "Type: plist boolean\nFailsafe: false\nDescription: Use raw encoding for SMBIOS UUIDs.\n\nEach UUID AABBCCDD-EEFF-GGHH-IIJJ-KKLLMMNNOOPP is essentially a hexadecimal 16-byte number. It can be encoded in two ways:\n• Big Endian — by writing all the bytes as they are without making any order changes ({AA BB CC DD EE FF GG HH II JJ KK LL MM NN OO PP}). This method is also known as RFC 4122 encoding or Raw encoding.\n• Little Endian — by interpreting the bytes as numbers and using Little Endian byte representation ({DD CC BB AA FF EE HH GG II JJ KK LL MM NN OO PP}).\n\nThe SMBIOS specification did not explicitly specify the encoding format for the UUID up to SMBIOS 2.6, where it stated that Little Endian encoding shall be used. This led to the confusion in both firmware implementations and system software as different vendors used different encodings prior to that.\n• Apple uses the Big Endian format everywhere but it ignores SMBIOS UUID within macOS.\n• dmidecode uses the Big Endian format for SMBIOS 2.5.x or lower and the Little Endian format for 2.6 and newer.\nAcidanthera dmidecode prints all the three.\n• Windows uses the Little Endian format everywhere, but this only affects the visual representation of the values.\n\nOpenCore always sets a recent SMBIOS version (currently 3.2) when generating the modified DMI tables. If UseRawUuidEncoding is enabled, the Big Endian format is used to store the SystemUUID data. Otherwise, the Little Endian format is used.\n\nNote: This preference does not affect UUIDs used in DataHub and NVRAM as they are not standardised and are added by Apple. Unlike SMBIOS, they are always stored in the Big Endian format.";

/* DataHub */
/* U5s-uE-f0J */
"TT_datahubCheckbox_add" = "Add or remove this section from plist\nFailsafe: Remove";

/* o9h-XT-hbD */
"TT_platformInfo_datahub_SystemProductName" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Sets Model in gEfiMiscSubClassGuid. The value found on Macs is equal to SMBIOS SystemProductName in Unicode.";

/* agr-Am-FjN */
"TT_platformInfo_datahub_SystemSerialNumber" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Sets SystemSerialNumber in gEfiMiscSubClassGuid. The value found on Macs is equal to SMBIOS SystemSerialNumber in Unicode.";

/* iip-zN-Jsb */
"TT_platformInfo_datahub_SystemUUID" = "Type: plist string, GUID\nFailsafe: Empty (Not installed)\nDescription: Sets system-id in gEfiMiscSubClassGuid. The value found on Macs is equal to SMBIOS SystemUUID.";

/* qOV-63-yas */
"TT_ARTFrequency" = "Type: plist integer, 64-bit\nFailsafe: 0 (Automatic)\nDescription: Sets ARTFrequency in gEfiProcessorSubClassGuid. \n\nThis value contains CPU ART frequency, also known as crystal clock frequency. Its existence is exclusive to the Skylake generation and newer. The value is specified in Hz, and is normally 24 MHz for the client Intel segment, 25 MHz for the server Intel segment, and 19.2 MHz for Intel Atom CPUs. macOS till 10.15 inclusive assumes 24 MHz by default.\n\nNote: On Intel Skylake X ART frequency may be a little less (approx. 0.25%) than 24 or 25 MHz due to special EMI-reduction circuit.";

/* h7z-Be-rOD */
"TT_platformInfo_datahub_BoardProduct" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Sets board-id in gEfiMiscSubClassGuid. The value found on Macs is equal to SMBIOS BoardProduct in ASCII.";

/* vrV-lt-VAU */
"TT_BoardRevision" = "Type: plist data, 1 byte\nFailsafe: 0\nDescription: Sets board-rev in gEfiMiscSubClassGuid. The value found on Macs seems to correspond to internal board revision (e.g. 01).";

/* yKq-oF-Y1T */
"TT_DevicePathsSupported" = "Type: plist integer, 32-bit\nFailsafe: 0 (Not installed)\nDescription: Sets DevicePathsSupported in gEfiMiscSubClassGuid. Must be set to 01 for AppleACPIPlat- form.kext to append SATA device paths to Boot#### and efi-boot-device-data variables. Set to 01 on all modern Macs.";

/* W2E-oe-9Uq */
"TT_FSBFrequency" = "Type: plist integer, 64-bit\nFailsafe: 0 (Automatic)\nDescription: Sets FSBFrequency in gEfiProcessorSubClassGuid. Sets CPU FSB frequency.\n\nSets CPU FSB frequency. This value equals to CPU nominal frequency divided by CPU maximum bus ratio and is specified in Hz. Refer to MSR_NEHALEM_PLATFORM_INFO (CEh) MSR value to determine maximum bus ratio on modern Intel CPUs.\n\nNote: This value is not used on Skylake and newer but is still provided to follow suit.";

/* 2Oj-go-m5S */
"TT_InitialTSC" = "Type: plist integer, 64-bit\nFailsafe: 0\nDescription: Sets InitialTSC in gEfiProcessorSubClassGuid. Sets initial TSC value, normally 0.";

/* BJm-4X-red */
"TT_PlatformName" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Sets name in gEfiMiscSubClassGuid. The value found on Macs is platform in ASCII.";

/* bTa-i4-4eq */
"TT_SmcBranch" = "Type: plist data, 8 bytes\nFailsafe: Empty (Not installed)\nDescription: Sets RBr in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC RBr key.";

/* JBr-Jy-s8V */
"TT_SmcPlatform" = "Type: plist data, 8 bytes\nFailsafe: Empty (Not installed)\nDescription: Sets RPlt in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC RPlt key.";

/* X7k-fY-cFM */
"TT_SmcRevision" = "Type: plist data, 6 bytes\nFailsafe: Empty (Not installed)\nDescription: Sets REV in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC REV key.";

/* CdO-kb-3WH */
"TT_StartupPowerEvents" = "Type: plist integer, 64-bit\nFailsafe: 0\nDescription: Sets StartupPowerEvents in gEfiMiscSubClassGuid. The value found on Macs is power management state bitmask, normally 0. Known bits read by X86PlatformPlugin.kext:\n• 0x00000001 — Shutdown cause was a PWROK event (Same as GEN_PMCON_2 bit 0)\n• 0x00000002 — Shutdown cause was a SYS_PWROK event (Same as GEN_PMCON_2 bit 1)\n• 0x00000004 — Shutdown cause was a THRMTRIP# event (Same as GEN_PMCON_2 bit 3)\n• 0x00000008 — Rebooted due to a SYS_RESET# event (Same as GEN_PMCON_2 bit 4)\n• 0x00000010 — Power Failure (Same as GEN_PMCON_3 bit 1 PWR_FLR)\n• 0x00000020 — Loss of RTC Well Power (Same as GEN_PMCON_3 bit 2 RTC_PWR_STS)\n• 0x00000040 — General Reset Status (Same as GEN_PMCON_3 bit 9 GEN_RST_STS)\n• 0xffffff80 — SUS Well Power Loss (Same as GEN_PMCON_3 bit 14)\n• 0x00010000 — Wake cause was a ME Wake event (Same as PRSTS bit 0, ME_WAKE_STS)\n• 0x00020000 — Cold Reboot was ME Induced event (Same as PRSTS bit 1 \n• 0x00040000 — Warm Reboot was ME Induced event (Same as PRSTS bit 2 \n• 0x00080000 — Shutdown was ME Induced event (Same as PRSTS bit 3 ME_HOST_PWRDN)\n• 0x00100000 — Global reset ME Watchdog Timer event (Same as PRSTS bit 6)\n• 0x00200000 — Global reset PowerManagement Watchdog Timer event (Same as PRSTS bit 15)";

/* Generic */
/* 38m-qA-it7 */
"TT_genericCheckbox_add" = "Add or remove this section from plist\nFailsafe: Add";

/* 8g1-Si-2Vs */
"TT_platformInfo_generic_SystemProductName" = "Type: plist string\nFailsafe: Empty (OEM specified or not installed)\nDescription: Refer to SMBIOS SystemProductName.";

/* mPV-Tv-466 */
"TT_platformInfo_generic_SystemSerialNumber" = "Type: plist string\nFailsafe: Empty (OEM specified or not installed)\nDescription: Refer to SMBIOS SystemSerialNumber.\n\nSpecify special string value OEM to extract current value from NVRAM (SSN variable) or SMBIOS and use it throughout the sections. This feature can only be used on Mac-compatible firmware.";

/* jaL-um-8Nb */
"TT_platformInfo_generic_SystemUUID" = "Type: plist string, GUID\nFailsafe: Empty (OEM specified or not installed)\nDescription: Refer to SMBIOS SystemUUID.\n\nSpecify special string value OEM to extract current value from NVRAM (system-id variable) or SMBIOS and use it throughout the sections. Since not every firmware implementation has valid (and unique) values, this feature is not applicable to some setups, and may provide unexpected results. It is highly recommended to specify the UUID explicitly. Refer to UseRawUuidEncoding to determine how SMBIOS value is parsed.";

/* rLa-T9-n6A */
"TT_platformInfo_generic_MLB" = "Type: plist string\nFailsafe: Empty (OEM specified or not installed)\nDescription: Refer to SMBIOS BoardSerialNumber.\n\nSpecify special string value OEM to extract current value from NVRAM (MLB variable) or SMBIOS and use it throughout the sections. This feature can only be used on Mac-compatible firmware.";

/* TTj-aB-3ch */
"TT_platformInfo_generic_ROM" = "Type: plist multidata, 6 bytes\nFailsafe: Empty (OEM specified or not installed)\nDescription: Refer to 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM.\n\nSpecify special string value OEM to extract current value from NVRAM (ROM variable) and use it throughout the sections. This feature can only be used on Mac-compatible firmware.";

/* YN8-NU-Zgm */
"TT_generic_ProcessorType" = "Type: plist integer, 16-bit\nFailsafe: 0 (Automatic)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE131 - ProcessorType Description: Combined of Processor Major and Minor types.";

/* PPQ-0x-9Ub */
"TT_systemMemoryStatus" = "Type: plist string\nFailsafe: Auto\nDescription: Indicates whether system memory is upgradable in PlatformFeature. This controls the visibility of the Memory tab in 'About This Mac'.\n\nValid values:\n• Auto — use the original PlatformFeature value.\n• Upgradable — explicitly unset PT_FEATURE_HAS_SOLDERED_SYSTEM_MEMORY (0x2) in PlatformFeature.\n• Soldered — explicitly set PT_FEATURE_HAS_SOLDERED_SYSTEM_MEMORY (0x2) in PlatformFeature.\n\nNote: On certain Mac models, such as the MacBookPro10,x and any MacBookAir, SPMemoryReporter.spreporter will ignore PT_FEATURE_HAS_SOLDERED_SYSTEM_MEMORY and assume that system memory is non-upgradable.";

"TT_AdviseFeatures" = "Type: plist boolean\nFailsafe: false\nDescription: Updates FirmwareFeatures with supported bits.\n\nAdded bits to FirmwareFeatures:\n• FW_FEATURE_SUPPORTS_CSM_LEGACY_MODE (0x1) - Without this bit, it is not possible to reboot to Windows installed on a drive with an EFI partition that is not the first partition on the disk.\n• FW_FEATURE_SUPPORTS_UEFI_WINDOWS_BOOT (0x20000000) - Without this bit, it is not possible to reboot to Windows installed on a drive with an EFI partition that is the first partition on the disk.\n• FW_FEATURE_SUPPORTS_APFS (0x00080000) - Without this bit, it is not possible to install macOS on an APFS disk.\n• FW_FEATURE_SUPPORTS_LARGE_BASESYSTEM (0x800000000) - Without this bit, it is not possible to install macOS versions with large BaseSystem images, such as macOS 12.\n\nNote: On most newer firmwares these bits are already set, the option may be necessary when \"upgrading\" the firmware with new features.";

/* Z8Z-8r-mnL */
"TT_SpoofVendor" = "Type: plist boolean\nFailsafe: false\nDescription: Sets SMBIOS vendor fields to Acidanthera.\n\nIt can be dangerous to use 'Apple' in SMBIOS vendor fields for reasons outlined in the SystemManufacturer description. However, certain firmware may not provide valid values otherwise, which could obstruct the operation of some software.";

/* bKX-Jd-g28 */
"TT_MaxBIOSVersion" = "Type: plist boolean\nFailsafe: false\nDescription: Sets BIOSVersion to 9999.999.999.999.999, recommended for legacy Macs when using Automatic PlatformInfo, to avoid BIOS updates in unofficially supported macOS versions.";

/* PlatformNVRAM */
/* IJO-Va-YDO */
"TT_platformnvramCheckbox_add" = "Add or remove this section from plist\nFailsafe: Remove";

/* MpC-g9-pKJ */
"TT_BID" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Specifies the value of NVRAM variable 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID.";

/* L5e-wR-9li */
"TT_platformInfo_platformnvram_MLB" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Specifies the values of NVRAM variables 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB and 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB";

/* yhE-PH-xkY */
"TT_platformInfo_platformnvram_ROM" = "Type: plist data, 6 bytes\nFailsafe: Empty (Not installed)\nDescription: Specifies the values of NVRAM variables 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM and 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM";

/* L5k-Nq-H9Z */
"TT_FirmwareFeatures" = "Type: plist data, 8 bytes\nFailsafe: Empty (Not installed)\nDescription: This variable comes in pair with FirmwareFeaturesMask. Specifies the values of NVRAM variables:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures";

/* 6Kd-rJ-POa */
"TT_FirmwareFeaturesMask" = "Type: plist data, 8 bytes\nFailsafe: Empty (Not installed)\nDescription: This variable comes in pair with FirmwareFeatures. Specifies the values of NVRAM variables:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask";

/* Nq6-s5-69T */
"TT_platformInfo_platformnvram_SystemUUID" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Specifies the value of NVRAM variable 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:system-id for boot services only. The value found on Macs is equal to SMBIOS SystemUUID.";

/* Bwi-9B-eFc */
"TT_platformInfo_platformnvram_SystemSerialNumber" = "Type: plist string\nFailsafe: Empty (Not installed)\nDescription: Specifies the values of NVRAM variables 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_SSN and 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:SSN.";

/* Memory */
/* zev-9o-4NS */
"TT_DataWidth" = "Type: plist integer, 16-bit\nFailsafe: 0xFFFF (unknown)\nSMBIOS: Memory Device (Type 17) — Data Width\nDescription: Specifies the data width, in bits, of the memory. A DataWidth of 0 and a TotalWidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.";

/* hF3-5Q-b46 */
"TT_errorcorrection" = "Type: plist integer, 8-bit\nFailsafe: 0x03\nSMBIOS: Physical Memory Array (Type 16) — Memory Error Correction\nDescription: Specifies the primary hardware error correction or detection method supported by the memory.\n• 0x01 — Other\n• 0x02 — Unknown\n• 0x03 — None\n• 0x04 — Parity\n• 0x05 — Single-bit ECC\n• 0x06 — Multi-bit ECC\n• 0x07 — CRC";

/* haT-n9-1ut */
"TT_formfactor" = "Type: plist integer, 8-bit\nFailsafe: 0x02\nSMBIOS: Memory Device (Type 17) — Form Factor\nDescription: Specifies the form factor of the memory. \n\nOn Macs, this should typically be DIMM or SODIMM. Commonly used form factors are listed below.\n\nWhen CustomMemory is false, this value is automatically set based on Mac product name.\n\nWhen Automatic is true, the original value from the the corresponding Mac model will be set if available. Otherwise, the value from OcMacInfoLib will be set. When Automatic is false, a user-specified value will be set if available. Otherwise, the original value from the firmware will be set. If no value is provided, the fallback value (zero) will be set.\n\n• 0x01 — Other\n• 0x02 — Unknown\n• 0x09 — DIMM\n• 0x0D — SODIMM\n• 0x0F — FB-DIMM";

/* Y4W-6h-1G9 */
"TT_MaxCapacity" = "Type: plist integer, 64-bit\nFailsafe: 0\nSMBIOS: Physical Memory Array (Type 16) — Maximum Capacity\nDescription: Specifies the maximum amount of memory, in bytes, supported by the system.";

/* 73U-MV-8lJ */
"TT_TotalWidth" = "Type: plist integer, 16-bit\nFailsafe: 0xFFFF (unknown)\nSMBIOS: Memory Device (Type 17) — Total Width\nDescription: Specifies the total width, in bits, of the memory, including any check or error-correction bits. If there are no error-correction bits, this value should be equal to DataWidth.";

/* w6I-Xj-IPK */
"TT_type" = "Type: plist integer, 8-bit\nFailsafe: 0x02\nSMBIOS: Memory Device (Type 17) — Memory Type\nDescription: Specifies the memory type. Commonly used types are listed below.\n• 0x01 — Other\n• 0x02 — Unknown\n• 0x0F — SDRAM\n• 0x12 — DDR\n• 0x13 — DDR2\n• 0x14 — DDR2 FB-DIMM\n• 0x18 — DDR3\n• 0x1A — DDR4\n• 0x1B — LPDDR\n• 0x1C — LPDDR2\n• 0x1D — LPDDR3\n• 0x1E — LPDDR4";

/* kmI-CT-lAM */
"TT_typedetail" = "Type: plist integer, 16-bit\nFailsafe: 0x4\nSMBIOS: Memory Device (Type 17) — Type Detail\nDescription: Specifies additional memory type information.\n• Bit 0 — Reserved, set to 0\n• Bit 1 — Other\n• Bit 2 — Unknown\n• Bit 7 — Synchronous\n• Bit 13 — Registered (buffered)\n• Bit 14 — Unbuffered (unregistered)";

/* Devices */
/* GR6-98-yvG */
"TT_Devices_Table" = "1. AssetTag\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Asset Tag\nDescription: Specifies the asset tag of this memory device.\n2. BankLocator\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Bank Locator\nDescription: Specifies the physically labeled bank where the memory device is located.\n3. DeviceLocator\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Device Locator\nDescription: Specifies the physically-labeled socket or board position where the memory device is located.\n4. Manufacturer\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Manufacturer\nDescription: Specifies the manufacturer of this memory device.\n\nFor empty slot this must be set to NO DIMM for macOS System Profiler to correctly display memory slots on certain Mac models, e.g. MacPro7,1. MacPro7,1 imposes additional requirements on the memory layout:\n• The amount of installed sticks must one of the following: 4, 6, 8, 10, 12. Using any different value will cause an error in the System Profiler.\n• The amount of memory slots must equal to 12. Using any different value will cause an error in the System Profiler.\n• Memory sticks must be installed in dedicated memory slots as explained on the support page. SMBIOS memory devices are mapped to the following slots: 8, 7, 10, 9, 12, 11, 5, 6, 3, 4, 1, 2.\n5. PartNumber\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Part Number\nDescription: Specifies the part number of this memory device.\n6. SerialNumber\nType: plist string\nFailsafe: Unknown\nSMBIOS: Memory Device (Type 17) — Serial Number\nDescription: Specifies the serial number of this memory device.\n7. Size\nType: plist integer, 32-bit\nFailsafe: 0\nSMBIOS: Memory Device (Type 17) — Size\nDescription: Specifies the size of the memory device, in megabytes. 0 indicates this slot is not populated.\n8. Speed\nType: plist integer, 16-bit\nFailsafe: 0\nSMBIOS: Memory Device (Type 17) — Speed\nDescription: Specifies the maximum capable speed of the device, in megatransfers per second (MT/s). 0 indicates an unknown speed.";

/* SMBIOS */
/* PHO-4O-OIP */
"TT_smbiosCheckbox_add" = "Add or remove this section from plist\nFailsafe: Remove";

/* p9S-yK-fiz */
"TT_smbios_ProductName" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1), Product Name\nDescription: Preferred Mac model used to mark the device as supported by the operating system. This value must be specified by any configuration for later automatic generation of the related values in this and other SMBIOS tables and related configuration parameters. If SystemProductName is not compatible with the target operating system, -no_compat_check boot argument may be used as an override.\n\nNote: If SystemProductName is unknown, and related fields are unspecified, default values should be assumed as being set to MacPro6,1 data. The list of known products can be found in AppleModels.";

/* Rag-wy-fpE */
"TT_Family" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — Family Description: Family name. May look like iMac Pro.";

/* gqH-S3-VMd */
"TT_systemManufacturer" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — Manufacturer\nDescription: OEM manufacturer of the particular board. Use failsafe unless strictly required. Do not override to contain Apple Inc. on non-Apple hardware, as this confuses numerous services present in the operating system, such as firmware updates, eficheck, as well as kernel extensions developed in Acidanthera, such as Lilu and its plugins. In addition it will also make some operating systems such as Linux unbootable.";

/* J9G-p3-A50 */
"TT_SKUNumber" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — SKU Number\nDescription: Mac Board ID (board-id). May look like Mac-7BA5B2D9E42DDD94 or Mac-F221BEC8 in older models. Sometimes it can be just empty.";

/* a03-aA-XtL */
"TT_smbios_SystemSerialNumber" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — Serial Number\nDescription: Product serial number in defined format. Known formats are described in macserial.";

/* Hjz-kh-KPV */
"TT_smbios_SystemVersion" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — Version\nDescription: Product iteration version number. May look like 1.1";

/* fux-7e-g2r */
"TT_smbios_SystemUUID" = "Type: plist string, GUID\nFailsafe: Empty (OEM specified)\nSMBIOS: System Information (Type 1) — UUID\nDescription: A UUID is an identifier that is designed to be unique across both time and space. It requires no central registration process.";

/* SO7-47-4Z3 */
"TT_smbios_BiosVendor" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: BIOS Information (Type 0) — Vendor\nDescription: BIOS Vendor. All rules of SystemManufacturer do apply.";

/* h4J-NQ-LcH */
"TT_smbios_BiosVersion" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: BIOS Information (Type 0) — BIOS Version\nDescription: Firmware version. This value gets updated and takes part in update delivery configuration and macOS version compatibility. This value could look like MM71.88Z.0234.B00.1809171422 in older firmware, and is described in BiosId.h. In newer firmware it should look like 236.0.0.0.0 or 220.230.16.0.0 (iBridge: 16.16.2542.0.0,0). iBridge version is read from BridgeOSVersion variable, and is only present on macs with T2.";

/* 6gn-IY-sd7 */
"TT_ReleaseDate" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: BIOS Information (Type 0) — BIOS Release Date\nDescription: Firmware release date. Similar to BIOSVersion. May look like 12/08/2017.";

/* YnG-4B-0S3 */
"TT_ChassisManufacturer" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Enclosure or Chassis (Type 3) — Manufacturer Description: Board manufacturer. All rules of SystemManufacturer do apply.";

/* frw-3J-2Cg */
"TT_ChassisType" = "Type: plist integer\nFailsafe: 0 (OEM specified)\nSMBIOS: System Enclosure or Chassis (Type 3) — Type\nDescription: Chassis type. Refer to Table 17 — System Enclosure or Chassis Types for details.";

/* eGy-sp-yaM */
"TT_ChassisVersion" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Enclosure or Chassis (Type 3) — Version Description: Should match BoardProduct.";

/* gTB-8E-Nin */
"TT_Chassis_SerialNumber" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Enclosure or Chassis (Type 3) — Version Description: Should match SystemSerialNumber.";

/* D26-kV-2wQ */
"TT_ChassisAssetTag" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: System Enclosure or Chassis (Type 3) — Asset Tag Number Description: Chassis type name. Varies, could be empty or MacBook-Aluminum.";

/* mON-cg-FYL */
"TT_BoardManufacturer" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) - Manufacturer Description: Board manufacturer. All rules of SystemManufacturer do apply.";

/* X9U-bM-MRj */
"TT_BoardProduct" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) - Product\nDescription: Mac Board ID (board-id). May look like Mac-7BA5B2D9E42DDD94 or Mac-F221BEC8 in older models.";

/* cWR-8m-2Jn */
"TT_BoardVersion" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) - Version\nDescription: Board version number. Varies, may match SystemProductName or SystemProductVersion.";

/* xDD-P3-Saq */
"TT_BoardSerialNumber" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) — Serial Number\nDescription: Board serial number in defined format. Known formats are described in macserial.";

/* GJj-A4-bd9 */
"TT_BoardAssetTag" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) — Asset Tag\nDescription: Asset tag number. Varies, may be empty or Type2 - Board Asset Tag.";

/* YgB-Sp-EZ5 */
"TT_BoardType" = "Type: plist integer\nFailsafe: OEM specified\nSMBIOS: Baseboard (or Module) Information (Type 2) — Board Type\nDescription: Either 0xA (Motherboard (includes processor, memory, and I/O) or 0xB (Processor/Memory Module). Refer to Table 15 – Baseboard: Board Type for details.";

/* aXB-A5-lJa */
"TT_LocationInChassis" = "Type: plist string\nFailsafe: Empty (OEM specified)\nSMBIOS: Baseboard (or Module) Information (Type 2) — Location in Chassis Description: Varies, may be empty or Part Component.";

/* 4l3-Do-kcw */
"TT_Features" = "Type: plist data, 8 bytes\nFailsafe: 0 (OEM specified on Apple hardware, 0 otherwise)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE128 - FirmwareFeatures and ExtendedFirmwareFeatures Description: 64-bit firmware features bitmask. Refer to AppleFeatures.h for details. Lower 32 bits match FirmwareFeatures. Upper 64 bits match ExtendedFirmwareFeatures.";

/* ih3-wv-2Kc */
"TT_FeaturesMask" = "Type: plist data, 8 bytes\nFailsafe: 0 (OEM specified on Apple hardware, 0 otherwise)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE128 - FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask Description: Supported bits of extended firmware features bitmask. Refer to AppleFeatures.h for details. Lower 32 bits match FirmwareFeaturesMask. Upper 64 bits match ExtendedFirmwareFeaturesMask.";

/* Yog-wn-LaZ */
"TT_PlatformFeature" = "Type: plist integer, 32-bit\nFailsafe: 0xFFFFFFFF  (OEM specified on Apple hardware, do not provide the table otherwise)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE133 - PlatformFeature\nDescription: Platform features bitmask. Missing on older Macs.";

/* oMm-l1-RDC */
"TT_SmcVersion" = "Type: plist data, 16 bytes\nFailsafe: All zero  (OEM specified on Apple hardware, do not provide the table otherwise)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE134 - Version\nDescription: ASCII string containing SMC version in upper case. Missing on T2 based Macs.";

/* RLW-Hz-QKb */
"TT_smbios_ProcessorType" = "Type: plist integer, 16-bit\nFailsafe: 0 (Automatic)\nSMBIOS: APPLE_SMBIOS_TABLE_TYPE131 - ProcessorType Description: Combined of Processor Major and Minor types.\n\nAutomatic value generation attempts to provide the most accurate value for the currently installed CPU. When this fails, please raise an issue and provide sysctl machdep.cpu and dmidecode output. For a full list of available values and their limitations (the value will only apply if the CPU core count matches), refer to the Apple SMBIOS definitions header.";

/* uefiController */
/* APFS */
/* 8Sc-F2-ONI */
"TT_EnableJumpstart" = "Type: plist boolean\nFailsafe: false\nDescription: Load embedded APFS drivers from APFS containers.\n\nAn APFS EFI driver is bundled in all bootable APFS containers. This option performs the loading of signed APFS drivers (consistent with the ScanPolicy). Refer to the “EFI Jumpstart” section of the Apple File System Reference for details.";

/* H5Y-DY-WOe */
"TT_GlobalConnect" = "Type: plist boolean\nFailsafe: false\nDescription: Perform full device connection during APFS loading.\n\nEvery handle is connected recursively instead of the partition handle connection typically used for APFS driver loading. This may result in additional time being taken but can sometimes be the only way to access APFS partitions on certain firmware, such as those on older HP laptops.";

/* HdB-KO-x50 */
"TT_HideVerbose" = "Type: plist boolean\nFailsafe: false\nDescription: Hide verbose output from APFS driver.\nAPFS verbose output can be useful for debugging.";

/* kSG-eA-B2o */
"TT_JumpstartHotPlug" = "Type: plist boolean\nFailsafe: false\nDescription: Load APFS drivers for newly connected devices.\n\nPermits APFS USB hot plug which enables loading APFS drivers, both at OpenCore startup and during OpenCore picker dusplay. Disable if not required.";

/* L9i-6i-Mis */
"TT_MinDate" = "Type: plist integer\nFailsafe: 0\nDescription: Minimal allowed APFS driver date.\n\nThe APFS driver date connects the APFS driver with the calendar release date. Apple ultimately drops support for older macOS releases and APFS drivers from such releases may contain vulnerabilities that can be used to compromise a computer if such drivers are used after support ends. This option permits restricting APFS drivers to current macOS versions.\n\n• 0 — require the default supported release date of APFS in OpenCore. The default release date will increase with time and thus this setting is recommended. Currently set to 2021/01/01.\n• -1 — permit any release date to load (strongly discouraged).\n• Other — use custom minimal APFS release date, e.g. 20200401 for 2020/04/01. APFS release dates can be found in OpenCore boot log and OcApfsLib.";

/* TYZ-jG-lfr */
"TT_MinVersion" = "Type: plist integer\nFailsafe: 0\nDescription: Minimal allowed APFS driver version.\n\nThe APFS driver version connects the APFS driver with the macOS release. Apple ultimately drops support for older macOS releases and APFS drivers from such releases may contain vulnerabilities that can be used to compromise a computer if such drivers are used after support ends. This option permits restricting APFS drivers to current macOS versions.\n\n• 0 — require the default supported version of APFS in OpenCore. The default version will increase with time and thus this setting is recommended. Currently set to allow macOS Big Sur and newer (1600000000000000).\n• -1 — permit any version to load (strongly discouraged).\n• Other — use custom minimal APFS version, e.g. 1412101001000000 from macOS Catalina 10.15.4. APFS versions can be found in OpenCore boot log and OcApfsLib.";

/* AppleInput */
/* frr-qu-WDh */
"TT_appleEvent" = "Type: plist string\nFailsafe: Auto\nDescription: Determine whether the OpenCore builtin or the OEM Apple Event protocol is used.\n\nThis option determines whether the OEM Apple Event protocol is used (where available), or whether OpenCore’s reversed engineered and updated re-implementation is used. In general OpenCore’s re-implementation should be preferred, since it contains updates such as noticeably improved fine mouse cursor movement and configurable key repeat delays.\n\n• Auto — Use the OEM Apple Event implementation if available, connected and recent enough to be used, otherwise use the OpenCore re-implementation. On non-Apple hardware this will use the OpenCore builtin implementation. On some Macs such as Classic Mac Pros, this will prefer the Apple implementation but on both older and newer Mac models than these, this option will typically use the OpenCore re-implementation instead. On older Macs, this is because the implementation available is too old to be used while on newer Macs, it is because of optimisations added by Apple which do not connect the Apple Event protocol except when needed – e.g. except when the Apple boot picker is explicitly started. Due to its somewhat unpredicatable results, this option is not typically recommended.\n• Builtin — Always use OpenCore's updated re-implementation of the Apple Event protocol. Use of this setting is recommended even on Apple hardware, due to improvements (better fine mouse control, configurable key delays) made in the OpenCore re-implementation of the protocol.\n• OEM — Assume Apple's protocol will be available at driver connection. On all Apple hardware where a recent enough Apple OEM version of the protocol is available -- whether or not connected automatically by Apple's firmware -- this option will reliably access the Apple implementation. On all other systems, this option will result in no keyboard or mouse support. For the reasons stated, Builtin is recommended in preference to this option in most cases.";

/* xpZ-sA-YNw */
"TT_CustomDelays" = "Type: plist boolean\nFailsafe: false\nDescription: Enable custom key repeat delays when using the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\n• true — The values of KeyInitialDelay and KeySubsequentDelay are used.\n• false — Apple default values of 500ms (50) and 50ms (5) are used.";

"TT_GraphicsInputMirroring" = "Type: plist boolean\nFailsafe: false\nDescription: Apple’s own implementation of AppleEvent prevents keyboard input during graphics applications from appearing on the basic console input stream.\n\nWith the default setting of false, OpenCore's builtin implementation of AppleEvent replicates this behaviour.\n\nOn non-Apple hardware this can stop keyboard input working in graphics-based applications such as Windows BitLocker which use non-Apple key input methods.\n\nThe recommended setting on all hardware is true.\n\nNote: AppleEvent's default behaviour is intended to prevent unwanted queued keystrokes from appearing after exiting graphics-based UEFI applications; this issue is already handled separately within OpenCore.\n\n• True --- Allow keyboard input to reach graphics mode apps which are not using Apple input protocols.\n• False --- Prevent key input mirroring to non-Apple protocols when in graphics mode.";

/* LPe-Zp-8MC */
"TT_KeyInitialDelay" = "Type: plist integer\nFailsafe: 50 (500ms before first key repeat)\nDescription: Configures the initial delay before keyboard key repeats in the OpenCore re-implementation of the Apple Event protocol, in units of 10ms.\n\nThe Apple OEM default value is 50 (500ms).\n\nNote 1: On systems not using KeySupport, this setting may be freely used to configure key repeat behaviour.\n\nNote 2: On systems using KeySupport, but which do not show the 'two long delays' behavior (see Note 3) and/or which always show a solid 'set default' indicator (see KeyForgetThreshold) then this setting may also be freely used to configure key repeat initial delay behaviour, except that it should never be set to less than KeyForgetThreshold to avoid uncontrolled key repeats.\n\nNote 3: On some systems using KeySupport, you may find that you see one additional slow key repeat before normal speed key repeat starts, when holding a key down. If so, you may wish to configure KeyInitialDelay and KeySubsequentDelay according to the instructions at Note 3 of KeySubsequentDelay.";

/* Op9-Rz-IAN */
"TT_KeySubsequentDelay" = "Type: plist integer\nFailsafe: 5 (50ms between subsequent key repeats)\nDescription: Configures the gap between keyboard key repeats in the OpenCore re-implementation of the Apple Event protocol, in units of 10ms.\n\nThe Apple OEM default value is 5 (50ms).\n0 is an invalid value for this option (will issue a debug log warning and use 1 instead).\n\nNote 1: On systems not using KeySupport, this setting may be freely used to configure key repeat behaviour.\n\nNote 2: On systems using KeySupport, but which do not show the 'two long delays' behaviour (see Note 3) and/or which always show a solid 'set default' indicator (see KeyForgetThreshold) (which should apply to many/most systems using AMI KeySupport mode) then this setting may be freely used to configure key repeat subsequent delay behaviour, except that it should never be set to less than KeyForgetThreshold to avoid uncontrolled key repeats.\n\nNote 3: On some systems using KeySupport, particularly KeySupport in non-AMI mode, you may find that after configuring KeyForgetThreshold you get one additional slow key repeat before normal speed key repeat starts, when holding a key down. On systems where this is the case, it is an unavoidable artefect of using KeySupport to emulate raw keyboard data, which is not made available by UEFI. While this 'two long delays' issue has minimal effect on overall usability, nevertheless you may wish to resolve it, and it is possible to do so as follows:\n• Set CustomDelays to true\n• Set KeyInitialDelay to 0\n• Set KeySubsequentDelay to at least the value of your KeyForgetThreshold setting\n\nThe above procedure works as follows:\n• Setting KeyInitialDelay to 0 cancels the Apple Event initial repeat delay (when using the OpenCore builtin Apple Event implementation with CustomDelays enabled), therefore the only long delay you will see is the the non-configurable and non-avoidable initial long delay introduced by the BIOS key support on these machines.\n• Key-smoothing parameter KeyForgetThreshold effectively acts as the shortest time for which a key can appear to be held, therefore a key repeat delay of less than this will guarantee at least one extra repeat for every key press, however quickly the key is physically tapped.\n• In the unlikely event that you still get frequent, or occasional, double key responses after setting KeySubsequentDelay equal to your system's value of KeyForgetThreshold, then increase KeySubsequentDelay by one or two more until this effect goes away.";

/* maU-fq-8kE */
"TT_PointerSpeedDiv" = "Type: plist integer\nFailsafe: 1\nDescription: Configure pointer speed divisor in the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\nConfigures the divisor for pointer movements. The Apple OEM default value is 1. 0 is an invalid value for this option.\n\nNote: The recommended value for this option is 1. This value may optionally be modified in combination with PointerSpeedMul, according to user preference, to achieve customised mouse movement scaling.";

/* TSX-3o-2jP */
"TT_PointerSpeedMul" = "Type: plist integer\nFailsafe: 1\nDescription: Configure pointer speed multiplier in the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\nConfigures the multiplier for pointer movements. The Apple OEM default value is 1.\n\nNote: The recommended value for this option is 1. This value may optionally be modified in combination with PointerSpeedDiv, according to user preference, to achieve customised mouse movement scaling.";

"TT_PointerPollMin" = "Type: plist integer\nFailsafe: 0\nDescription: Configure minimal pointer polling period in ms.\n\nThis is the minimal period the OpenCore builtin AppleEvent driver polls pointer devices (e.g. mice, trackpads) for motion events. The current implementation defaults to 10 ms. Setting 0 leaves this default unchanged.\n\nNote: The OEM Apple implementation uses a polling rate of 2 ms.";

"TT_PointerPollMax" = "Type: plist integer\nFailsafe: 0\nDescription: Configure maximum pointer polling period in ms.\n\nThis is the maximum period the OpenCore builtin AppleEvent driver polls pointer devices (e.g. mice, trackpads) for motion events. The period is increased up to this value as long as the devices do not respond in time. The current implementation defaults to 80 ms. Setting 0 leaves this default unchanged.\n\nCertain trackpad drivers often found in Dell laptops can be very slow to respond when no physical movement happens. This can affect OpenCanopy and FileVault 2 user interface responsiveness and loading times. Increasing the polling periods can reduce the impact.\n\nNote: The OEM Apple implementation uses a polling rate of 2 ms.";

"TT_PointerPollMask" = "Type: plist integer, 32 bit\nFailsafe: -1\nDescription: Configure indices of polled pointers.\n\nSelects pointer devices to poll for AppleEvent motion events. -1 implies all devices. A bit sum is used to determine particular devices. E.g. to enable devices 0, 2, 3 the value will be 1+4+8 (corresponding powers of two). A total of 32 configurable devices is supported.\n\nCertain pointer devices can be present in the firmware even when no corresponding physical devices are available. These devices usually are placeholders, aggregate devices, or proxies. Gathering information from these devices may result in inaccurate motion activity in the user interfaces and even cause performance issues. Disabling such pointer devices is recommended for laptop setups having issues of this kind.\n\nThe amount of pointer devices available in the system can be found in the log. Refer to Found N pointer devices message for more details.\n\nNote: Has no effect when using the OEM Apple implementation (see AppleEvent setting).";

"TT_PointerDwellClickTimeout" = "Type: plist integer\nFailsafe: 0\nDescription: Configure pointer dwell-clicking single left click timeout in milliseconds in the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\nWhen the timeout expires, a single left click is issued at the current position. 0 indicates the timeout is disabled.";

"TT_PointerDwellDoubleClickTimeout" = "Type: plist integer\nFailsafe: 0\nDescription: Configure pointer dwell-clicking single left double click timeout in milliseconds in the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\nWhen the timeout expires, a single left double click is issued at the current position. 0 indicates the timeout is disabled.";

"TT_PointerDwellRadius" = "Type: plist integer\nFailsafe: 0\nDescription: Configure pointer dwell-clicking tolerance radius in pixels in the OpenCore re-implementation of the Apple Event protocol. Has no effect when using the OEM Apple implementation (see AppleEvent setting).\n\nThe radius is scaled by UIScale. When the pointer leaves this radius, the timeouts for PointerDwellClickTimeout and PointerDwellDoubleClickTimeout are reset and the new position is the centre for the new dwell-clicking tolerance radius.";

/* Audio */
/* YTE-Ba-80O */
"TT_AudioDevice" = "Type: plist string\nFailsafe: Empty\nDescription: Device path of the specified audio controller for audio support.\n\nThis typically contains builtin analog audio controller (HDEF) device path, e.g. PciRoot(0x0)/Pci(0x1b,0x0).\nThe list of recognised audio controllers can be found in the debug log:\nOCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs)\nOCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs)\nOCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs)\n\nIf using AudioDxe, the required device path is also output as:\nHDA: Connecting controller PciRoot(0x0)/Pci(0x1B,0x0)\n\nFinally, gfxutil -f HDEF command can be used in macOS to obtain the device path.\n\nSpecifying an empty device path will result in the first available audio controller being used, and can be a convenient option to get UEFI audio working if only one audio controller is present.";

/* AZW-9D-hq6 */
"TT_AudioCodec" = "Type: plist integer\nFailsafe: 0\nDescription: Codec address on the specified audio controller for audio support. This typically contains the first audio codec address on the builtin analog audio controller (HDEF). Audio codec addresses, e.g. 2, can be found in the debug log: \nOCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs) \nOCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs)\nOCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs)\n\nAs an alternative this value can be obtained from IOHDACodecDevice class in I/O Registry containing it in IOHDACodecAddress field.";

/* UrW-oc-0Oc */
"TT_AudioOut" = "Type: plist integer\nFailsafe: 0\nDescription: Index of the output port of the specified codec starting from 0.\n\nThis typically contains the index of the green out of the builtin analog audio controller (HDEF). The number of output nodes (N) in the debug log (marked in bold):\nOCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs)\nOCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs)\nOCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs) \n\nThe quickest way to find the right port is to bruteforce the values from 0 to N - 1.";

"TT_AudioOutMask" = "Type: plist integer\nFailsafe: -1\nDescription: Bit field indicating which output channels to use for UEFI sound.\n\nAudio mask is 1 « audio output (equivalently 2 ˆ audio output). E.g. for audio output 0 the bitmask is 1, for output 3 it is 8, and for outputs 0 and 3 it is 9.\n\nThe number of available output nodes (N) for each HDA codec is shown in the debug log (marked in bold-italic), audio outputs 0 to N - 1 may be selected:\nOCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs)\nOCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs)\nOCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs)\n\nWhen AudioDxe is used then additional information about each output channel is logged during driver binding, including the bitmask for each output. The bitmask values for the desired outputs should be added together to obtain the AudioOutMask value:\nHDA: | Port widget @ 0x9 is an output (pin defaults 0x2B4020) (bitmask 1)\nHDA: | Port widget @ 0xA is an output (pin defaults 0x90100112) (bitmask 2)\nHDA: | Port widget @ 0xB is an output (pin defaults 0x90100110) (bitmask 4)\nHDA: | Port widget @ 0x10 is an output (pin defaults 0x4BE030) (bitmask 8)\n\nFurther information on the available output channels may be found from a Linux codec dump using the command:
cat /proc/asound/card{n}/codec#{m}\n\nUsing AudioOutMask, it is possible to play sound to more than one channel (e.g. main speaker plus bass speaker; headphones plus speakers) as long as all the chosen outputs support the sound file format in use; if any do not then no sound will play and a warning will be logged.\n\nWhen all available output channels on the codec support the available sound file format, then a value of -1 will play sound to all channels simultaneously. If this does not work it will usually be quickest to try each available output channel one by one, by setting AudioOutMask to 1, 2, 4, etc., up to 2 ˆ N - 1, in order to work out which channel(s) produce sound.";

/* PF5-bc-9Z2 */
"TT_MinimumVolume" = "Type: plist integer\nFailsafe: 0\nDescription: Minimal heard volume level from 0 to 100.\n\nThe screen reader will use this volume level when the calculated volume level is lower than MinimumVolume and the boot chime will not play if the calculated volume level is lower than MinimumVolume.";

/* rNr-97-fnH */
"TT_VolumeAmplifier" = "Type: plist integer\nFailsafe: 0\nDescription: Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000.\nVolume level range read from SystemAudioVolume varies depending on the codec. To transform read value in [0, 127] range into raw volume range [0, 100] the read value is scaled to VolumeAmplifier percents.\n\nNote: the transformation used in macOS is not linear, but it is very close and this nuance is thus ignored.";

/* jGE-sP-Rtr */
"TT_SetupDelay" = "Type: plist integer\nFailsafe: 0\nDescription: Audio codec reconfiguration delay in milliseconds.\n\nSome codecs require a vendor-specific delay after the reconfiguration (e.g. volume setting). This option makes it configurable. A typical delay can be up to 0.5 seconds.";

/* 77y-Lm-hgl */
"TT_playchime" = "Type: plist string\nFailsafe: Auto\nDescription: Play chime sound at startup.\n\nEnabling this setting plays the boot chime using the builtin audio support. The volume level is determined by the SystemAudioVolumeDB NVRAM variable. Supported values are:\n• Auto — Enables chime when StartupMute NVRAM variable is not present or set to 00.\n• Enabled — Enables chime unconditionally.\n• Disabled — Disables chime unconditionally.\n\nNote 1: Enabled can be used separately from the StartupMute NVRAM variable to avoid conflicts when the firmware is able to play the boot chime.\n\nNote 2 : Regardless of this setting, the boot chime will not play if system audio is muted, i.e. if the SystemAudioVolume NVRAM variable has bit 0x80 set.";

/* 2zI-kW-5dk */
"TT_AudioSupport" = "Type: plist boolean\nFailsafe: false\nDescription: Activate audio support by connecting to a backend driver.\n\nEnabling this setting routes audio playback from builtin protocols to specified (AudioOutMask) dedicated audio ports of the specified codec (AudioCodec), located on the specified audio controller (AudioDevice).";

/* 4mo-Ut-bYl */
"TT_ResetTrafficClass" = "Type: plist boolean\nFailsafe: false\nDescription: Set HDA Traffic Class Select Register to TC0.\n\nAppleHDA kext will function correctly only if TCSEL register is configured to use TC0 traffic class. Refer to Intel I/O Controller Hub 9 (ICH9) Family Datasheet (or any other ICH datasheet) for more details about this register.\n\nNote: This option is independent from AudioSupport. If AppleALC is used it is preferred to use AppleALC alctcsel property instead.";

"TT_DisconnectHda" = "Type: plist boolean\nFailsafe: false\nDescription: Disconnect HDA controller before loading drivers.\n\nMay be required on some systems (e.g. Apple hardware, VMware Fusion guest) to allow a UEFI sound driver (such as AudioDxe) to take control of the audio hardware.\n\nNote: In addition to this option, most Apple hardware also requires the --gpio-setup driver argument which is dealt with in the AudioDxe section.";

"TT_MaximumGain" = "Type: plist integer\nFailsafe: -15\nDescription: Maximum gain to use for UEFI audio, specified in decibels (dB) with respect to amplifier reference level of 0 dB (see note 1).\n\nAll UEFI audio will use this gain setting when the system amplifier gain read from the SystemAudioVolumeDB NVRAM variable is higher than this. This is to avoid over-loud UEFI audio when the system volume is set very high, or the SystemAudioVolumeDB NVRAM value has been misconfigured.\n\nNote 1: A typical range of system gain values is from roughly -60 dB to exactly 0 dB, where 0 dB represents the amplifier maximum volume. However these values depend on the hardware and may be different, including gain levels above zero (therefore 0 dB is not the amplifier maximum volume) on non-standard hardware. On any hardware, following the Intel HDA specification, the range will always include 0 dB somewere (at either end or somewhere in between).\n\nNote 2: Values outside −128 dB to +127 dB (which are well beyond physically plausible decibel values) are not allowed.\n\nNote 3: Digital audio output – which does not have a volume slider in-OS – ignores this and all other gain settings, only mute settings are relevant.";

"TT_MinimumAssistGain" = "Type: plist integer\nFailsafe: -30\nDescription: Minimum gain in decibels (dB) to use for picker audio assist.\n\nThe screen reader will use this amplifier gain if the system amplifier gain read from the SystemAudioVolumeDB NVRAM variable is lower than this.\n\nNote: In addition to this setting, because audio assist must be audible to serve its function, audio assist is not muted even if the OS sound is muted or the StartupMute NVRAM variable is set.";

"TT_MinimumAudibleGain" = "Type: plist integer\nFailsafe: -128\nDescription: Minimum gain in decibels (dB) at which to attempt to play any sound.\n\nThe boot chime will not play if the system amplifier gain level in the SystemAudioVolumeDB NVRAM variable is lower than this.\n\nNote: This setting is designed to save unecessary pauses due to audio setup at inaudible volume levels, when no sound will be heard anyway. Whether there are inaudible volume levels depends on the hardware. On some hardware (including Apple) the audio values are well enough matched to the hardware that the lowest volume levels available are very quiet but audible, whereas on some other hardware combinations, the lowest part of the volume range may not be audible at all.";

/* Drivers */
/* 6zo-Jl-Ryl */
"TT_uefi_driversTable" = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n2. Path\nType: plist string\nFailsafe: Empty\nDescription: Path of file to be loaded as a UEFI driver from OC/Drivers directory.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: If false this driver entry will be ignored.\n4. LoadEarly\nType: plist boolean\nFailsafe: false\nDescription: Load the driver early in the OpenCore boot process, before NVRAM setup.\n\nNote: Do not enable this option unless specifically recommended to do so for a given driver and purpose.\n5. Arguments\nType: plist string\nFailsafe: Empty\nDescription: Some OpenCore plugins accept optional additional arguments which may be specified as a string here.";

/* 9f0-xd-rhT */
"TT_ConnectDrivers" = "Type: plist boolean\nFailsafe: false\nDescription: Perform UEFI controller connection after driver loading.\nThis option is useful for loading drivers following UEFI driver model, as they may not start by themselves. Examples of such drivers are filesystem or audio drivers. While effective, this option may not be necessary for drivers performing automatic connection, and may slightly slowdown the boot.\n\nNote: Some types of firmware, particularly those made by Apple, only connect the boot drive to speed up the boot process. Enable this option to be able to see all the boot options when running multiple drives.";

/* Input */
/* xNH-9V-3kd */
"TT_KeyForgetThreshold" = "Type: plist integer\nFailsafe: 0\nDescription: Treat duplicate key presses as held keys if they arrive during this timeout, in 10 ms units. Only applies to systems using KeySupport.\n\nAppleKeyMapAggregator protocol is supposed to contain a fixed length buffer of currently pressed keys. However, the majority of the drivers which require KeySupport report key presses as interrupts, with automatically generated key repeat behaviour with some defined initial and subsequent delay. As a result, to emulate the raw key behaviour required by several Apple boot systems, we use a timeout to merge multiple repeated keys which are submitted within a small timeout window\n\nThis option allows setting this timeout based on the platform. The recommended value for the majority of platforms is from 5 (50 milliseconds) to 7 (70 milliseconds), although values up to 9 (90 milliseconds) have been observed to be required on some PS/2 systems.For reference, holding a key on VMware will repeat roughly every 20 milliseconds and the equivalent value for APTIO V is 30-40 milliseconds. KeyForgetThreshold should be configured to be longer than this. Thus, it is possible to configure a lower KeyForgetThreshold value on platforms with a faster native driver key repeat rate, for more responsive input, and it is required to set a higher value on slower platforms.\n\nPressing keys one after the other results in delays of at least 60 and 100 milliseconds for the same platforms. Ideally, KeyForgetThreshold should remain lower than this value, to avoid merging real key presses.\n\nTuning the value of KeyForgetThreshold is necessary for accurate and responsive keyboard input on systems on which KeySupport is enabled, and it is recommended to follow the instructions below to tune it correctly for your system.\n\nNote 1: To tune KeyForgetThreshold, you may use the 'set default' indicator within either OpenCanopy or the builtin picker. If KeyForgetThreshold is too low then the 'set default' indicator will continue to flicker while CTRL or =/+ is held down. You should configure the lowest value which avoids this flicker. On some systems (e.g. Aptio IV and potentially other systems using AMI KeySupport mode) you will be able to find a minimum KeyForgetThreshold value at which the 'set default' indicator goes on and stays on with no flicker at all - if so, use this value. On most other systems using KeySupport, you will find that the 'set default' indicator will flicker once, when first pressing and holding the CTRL or =/+ key, and then after a further very brief interval will go on and stay on. On such systems, you should chose the lowest value of KeyForgetThreshold at which you see only one initial flicker and then no subsequent flickering. (Where this happens, it is an unavoidable artefect on those systems of using KeySupport to emulate raw keyboard data, which is not made available by UEFI.)\n\nNote 2: KeyForgetThreshold should never need to be more than about 9 or 10 at most. If it is set to a value much higher than this, it will result in noticeably unresponsive keyboard input. Therefore, for overall key responsiveness, it is strongly recommended to configure a relatively lower value, at which the 'set default' indicator flickers once and then does not flicker, rather than using a much higher value (i.e. significantly greater than 10), which you may be able to find but should not use, where the 'set default' indicator does not flicker at all.";

/* TTL-Rn-Avg */
"TT_KeySupportMode" = "Type: plist string\nFailsafe: Auto\nDescription: Set internal keyboard input translation to AppleKeyMapAggregator protocol mode.\n• Auto — Performs automatic choice as available with the following preference: AMI, V2, V1.\n• V1 — Uses UEFI standard legacy input protocol EFI_SIMPLE_TEXT_INPUT_PROTOCOL.\n• V2 — Uses UEFI standard modern input protocol EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL.\n• AMI — Uses APTIO input protocol AMI_EFIKEYCODE_PROTOCOL.\n\nNote: Currently V1, V2, and AMI unlike Auto only do filtering of the particular specified protocol. This may change in the future versions.";

/* 3mi-sh-qNa */
"TT_PointerSupportMode" = "Type: plist string\nFailsafe: Empty\nDescription: Set OEM protocol used for internal pointer driver.\nCurrently the only supported variant is ASUS, using specialised protocol available on certain Z87 and Z97 ASUS boards. The value of this property cannot be empty if PointerSupport is enabled.";

/* fda-QM-Vl4 */
"TT_TimerResolution" = "Type: plist integer\nFailsafe: 0\nDescription: Set architecture timer resolution.\n\nThis option allows updating the firmware architecture timer period with the specified value in 100 nanosecond units. Setting a lower value typically improves performance and responsiveness of the interface and input handling.\n\nThe recommended value is 50000 (5 milliseconds) or slightly higher. Select ASUS Z87 boards use 60000 for the interface. Apple boards use 100000. In case of issues, this option can be left as 0.";

/* rxJ-TB-rJc */
"TT_KeyFiltering" = "Type: plist boolean\nFailsafe: false\nDescription: Enable keyboard input sanity checking.\nApparently some boards such as the GA Z77P-D3 may return uninitialised data in EFI_INPUT_KEY with all input protocols. This option discards keys that are neither ASCII, nor are defined in the UEFI specification (see tables 107 and 108 in version 2.8).";

/* 4fK-xq-9AN */
"TT_KeySupport" = "Type: plist boolean\nFailsafe: false\nDescription: Enable internal keyboard input translation to AppleKeyMapAggregator protocol.\n\nThis option activates the internal keyboard interceptor driver, based on AppleGenericInput, also known as AptioInputFix, to fill the AppleKeyMapAggregator database for input functioning. In cases where a separate driver such as OpenUsbKbDxe is used, this option should never be enabled. Additionally, this option is not required and should not be enabled with Apple firmware.";

/* EIc-ff-Thn */
"TT_KeySwap" = "Type: plist boolean\nFailsafe: false\nDescription: Swap Command and Option keys during submission.\nThis option may be useful for keyboard layouts with Option key situated to the right of Command key.";

/* dzp-p6-AHb */
"TT_PointerSupport" = "Type: plist boolean\nFailsafe: false\nDescription: Enable internal pointer driver.\n\nThis option implements standard UEFI pointer protocol (EFI_SIMPLE_POINTER_PROTOCOL) through select OEM protocols. The option may be useful on Z87 ASUS boards, where EFI_SIMPLE_POINTER_PROTOCOL is defective.";

/* Output */
"TT_ConsoleFont" = "Type: plist string\nFailsafe: Empty (use OpenCore builtin console font)\nDescription: Specify the console font to use for OpenCore Builtin text renderer.\n\nThe font file must be located in EFI/OC/Resources/Font/{font-name}.hex and must be 8x16 resolution. Various console fonts can be found online in either .bdf or .hex format. .bdf can be converted to .hex format using gbdfed (available for Linux or macOS).\n\nThere is often no need to change console font, the main use-case being to provide an extended character set for those relatively rare EFI applications which have multi-lingual support (e.g. memtest86).\n\nThe OcBinaryData repository includes:\n\t• Terminus — A font with extensive character support suitable for applications such as the above.\n\t• TerminusCore — A lightly modified version of the Terminus font, making some glyphs (@KMRSTVWimrsw) more similar to the free ISO Latin font used in XNU and OpenCore.\n\nTerminus and TerminusCore are provided under the SIL Open Font License, Version 1.1. Some additional GPL licensed fonts from the EPTO Fonts library, converted to the required .hex format, can be found here.\n\nNote 1: On many newer systems the System text renderer already provides a full set of international characters, in which case this can be used without requiring the Builtin renderer and a custom font.\n\nNote 2: This option only affects the Builtin text renderer and only takes effect from the point at which the Builtin renderer is configured. When console output is visible before this point, it is using the system console font.";

/* lye-vu-fi3 */
"TT_ConsoleMode" = "Type: plist string\nFailsafe: Empty (Maintain current console mode)\nDescription: Sets console output mode as specified with the WxH (e.g. 80x24) formatted string.\n\nSet to Max to attempt using the largest available console mode.\n\nNote: This field is best left empty on most types of firmware.";

"TT_InitialMode" = "Type: plist string\nFailsafe: Auto\nDescription: Selects the internal ConsoleControl mode in which TextRenderer will operate.\n\nAvailable values are Auto, Text and Graphics. Text and Graphics specify the named mode. Auto uses the current mode of the system ConsoleControl protocol when one exists, defaulting to Text mode otherwise.\n\nUEFI firmware typically supports ConsoleControl with two rendering modes: Graphics and Text. Some types of firmware do not provide a native ConsoleControl and rendering modes. OpenCore and macOS expect text to only be shown in Text mode but graphics to be drawn in any mode, and this is how the OpenCore Builtin renderer behaves. Since this is not required by the UEFI specification, behaviour of the system ConsoleControl protocol, when it exists, may vary.";

/* mlh-hW-OqT */
"TT_textrender" = "Type: plist string\nFailsafe: BuiltinGraphics\nDescription: Chooses renderer for text going through standard console output.\n\nCurrently two renderers are supported: Builtin and System. The System renderer uses firmware services for text rendering, however with additional options provided to sanitize the output. The Builtin renderer bypasses firmware services and performs text rendering on its own. Each renderer supports a different set of options. It is recommended to use the Builtin renderer, as it supports HiDPI mode and uses full screen resolution.\n\nEach renderer provides its own ConsoleControl protocol (in the case of SystemGeneric only, this passes some operations through to the system ConsoleControl protocol, if one exists).\n\nValid values of this option are combinations of the renderer to use and the ConsoleControl mode to set on the underlying system ConsoleControl protocol before starting. To control the initial mode of the provided ConsoleControl protocol once started, use the InitialMode option.\n\t• BuiltinGraphics — Switch to Graphics mode then use Builtin renderer with custom ConsoleControl.\n\t• BuiltinText — Switch to Text mode then use Builtin renderer with custom ConsoleControl.\n\t• SystemGraphics — Switch to Graphics mode then use System renderer with custom ConsoleControl.\n\t• SystemText — Switch to Text mode then use System renderer with custom ConsoleControl.\n• SystemGeneric — Use System renderer with custom a ConsoleControl protocol which passes its mode set and get operations through to system ConsoleControl when it exists.\n\nThe use of BuiltinGraphics is generally straightforward. For most platforms, it is necessary to enable ProvideConsoleGop and set Resolution to Max. The BuiltinText variant is an alternative to BuiltinGraphics for some very old and defective laptop firmware, which can only draw in Text mode.\n\nThe use of System protocols is more complicated. Typically, the preferred setting is SystemGraphics or SystemText. Enabling ProvideConsoleGop, setting Resolution to Max, enabling ReplaceTabWithSpace is useful on almost all platforms. SanitiseClearScreen, IgnoreTextInGraphics, and ClearScreenOnModeSwitch are more specific, and their use depends on the firmware.\n\nNote: Some Macs, such as the MacPro5,1, may have incompatible console output when using modern GPUs, and thus only BuiltinGraphics may work for them in such cases. NVIDIA GPUs may require additional firmware upgrades.";

/* hVw-xH-z40 */
"TT_Resolution" = "Type: plist string\nFailsafe: Empty (Maintain current screen resolution)\nDescription: Sets console output screen resolution.\n• Set to WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080) formatted string to request custom resolution from GOP if available.\n• Set to Max to attempt using the largest available screen resolution.\n\nOn HiDPI screens APPLE_VENDOR_VARIABLE_GUID UIScale NVRAM variable may need to be set to 02 to enable HiDPI scaling in FileVault 2 UEFI password interface and boot screen logo. Refer to Recommended Variables section for details.\n\nNote: This will fail when console handle has no GOP protocol. When the firmware does not provide it, it can be added with ProvideConsoleGop set to true.";

"TT_ClearScreenOnModeSwitch" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware only clear part of the screen when switching from graphics to text mode, leaving a fragment of previously drawn images visible. This option fills the entire graphics screen with black colour before switching to text mode.\n\nNote: This option only applies to System renderer.";

"TT_DirectGopRendering" = "Type: plist boolean\nFailsafe: false\nDescription: Use builtin graphics output protocol renderer for console.\n\nOn certain firmware, such as on the MacPro5,1, this may provide better performance or fix rendering issues. However, this option is not recommended unless there is an obvious benefit as it may result in issues such as slower scrolling.\nThis renderer fully supports AppleEg2Info protocol and will provide screen rotation for all EFI applications. In order to provide seamless rotation compatibility with EfiBoot, builtin AppleFramebufferInfo should also be used, i.e. it may need to be overridden on Mac EFI.";

"TT_IgnoreTextInGraphics" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware output text onscreen in both graphics and text mode. This is typically unexpected as random text may appear over graphical images and cause UI corruption. Setting this option to true will discard all text output if console control is not in Text mode.\n\nNote: This option only applies to the System renderer.";

"TT_ProvideConsoleGop" = "Type: plist boolean\nFailsafe: false\nDescription: Ensure GOP (Graphics Output Protocol) on console handle.\nmacOS bootloader requires GOP or UGA (for 10.4 EfiBoot) to be present on console handle, yet the exact location of  the graphics protocol is not covered by the UEFI specification. This option will ensure GOP and UGA, if present, are available on the console handle.\n\nNote: This option will also replace incompatible implementations of GOP on the console handle, as may be the case on the MacPro5,1 when using modern GPUs.";

"TT_ReconnectGraphicsOnConnect" = "Type: plist boolean\nFailsafe: false\nDescription: Reconnect all graphics drivers during driver connection.\n\nOn certain firmware, it may be desireable to use an alternative graphics driver providing better screen resolution options on legacy machines, or a driver supporting ForceResolution. This option attempts to disconnect all currently connected graphics drivers before connecting newly loaded drivers.\n\nNote: This option requires ConnectDrivers to be enabled.";

"TT_ReconnectOnResChange" = "Type: plist boolean\nFailsafe: false\nDescription: Reconnect console controllers after changing screen resolution.\n\nOn certain firmware, the controllers that produce the console protocols (simple text out) must be reconnected when the screen resolution is changed via GOP. Otherwise, they will not produce text based on the new resolution.\n\nNote: On several boards this logic may result in black screen when launching OpenCore from Shell and thus it is optional. In versions prior to 0.5.2 this option was mandatory and not configurable. Please do not use this unless required.";

"TT_ReplaceTabWithSpace" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware do not print tab characters or everything that follows them, causing difficulties in using the UEFI Shell’s builtin text editor to edit property lists and other documents. This option makes the console output spaces instead of tabs.\n\nNote: This option only applies to System renderer.";

"TT_SanitiseClearScreen" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware reset screen resolutions to a failsafe value (such as 1024x768) on the attempts to clear screen contents when large display (e.g. 2K or 4K) is used. This option attempts to apply a workaround.\n\nNote: This option only applies to the System renderer. On all known affected systems, ConsoleMode must be set to an empty string for this option to work.";

"TT_UgaPassThrough" = "Type: plist boolean\nFailsafe: false\nDescription: Provide UGA protocol instances on top of GOP protocol instances.\n\nSome types of firmware do not implement the legacy UGA protocol but this may be required for screen output by older EFI applications such as EfiBoot from 10.4.";

"TT_ForceResolution" = "Type: plist boolean\nFailsafe: false\nDescription: Forces Resolution to be set in cases where the desired resolution is not available by default, such as on legacy Intel GMA and first generation Intel HD Graphics (Ironlake/Arrandale). Setting Resolution to Max will try to pull the largest available resolution from the connected display’s EDID.\n\nNote: This option depends on the OC_FORCE_RESOLUTION_PROTOCOL protocol being present. This protocol is currently only supported by OpenDuetPkg. The OpenDuetPkg implementation currently only supports Intel iGPUs.";

"TT_GopPassThrough" = "Type: plist string\nFailsafe: Disabled\nDescription: Provide GOP protocol instances on top of UGA protocol instances.\n\nThe supported values for the option are as follows:\n• Enabled — provide GOP for all UGA protocols.\n• Apple — provide GOP for AppleFramebufferInfo-enabled protocols.\n• Disabled — do not provide GOP.\n\nThis option provides the GOP protocol via a UGA-based proxy for firmware that do not implement the protocol.\n\nNote: This option requires ProvideConsoleGop to be enabled.";

"TT_UIScale" = "Type: plist integer, 8 bit\nFailsafe: -1\nDescription: User interface scaling factor.\n\nCorresponds to 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:UIScale variable.\n• 1 — 1x scaling, corresponds to normal displays.\n• 2 — 2x scaling, corresponds to HiDPI displays.\n• -1 — leaves the current variable unchanged.\n• 0 — automatically chooses scaling based on the current resolution.\n\nNote 1: Automatic scale factor detection works on the basis of total pixel area and may fail on small HiDPI displays, in which case the value may be manually managed using the NVRAM section.\n\nNote 2: When switching from manually specified NVRAM variable to this preference an NVRAM reset may be needed.";

"TT_GopBurstMode" = "Type: plist boolean\nFailsafe: false\nDescription: Enable write-combining (WC) caching for GOP memory, if system firmware has not already enabled it.\n\nSome older firmware (e.g. EFI-era Macs) fails to set write-combining caching (aka burst mode) for GOP memory, even though the CPU supports it. Setting this can give a considerable speed-up for GOP operations, especially on systems which require DirectGopRendering.\n\nNote1: This quirk takes effect whether or not DirectGopRendering is set, and in some cases may give a noticeable speed-up to GOP operations even when DirectGopRendering is false.\n\nNote 2: On most systems from circa 2013 onwards, write-combining caching is already applied by the firmware to GOP memory, in which case GopBurstMode is unnecessary. On such systems enabling the quirk should normally be harmless, producing an OCC: debug log entry indicating that burst mode is already started.\n\nNote 3: Some caution should be taken when enabling this quirk, as it has been observed to cause hangs on a few systems. Since additional guards have been added to try to prevent this, please log a bugtracker issue if such a system is found.";

/* ProtocolOverrides */
"TT_AppleAudio" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces Apple audio protocols with builtin versions.\n\nApple audio protocols allow OpenCore and the macOS bootloader to play sounds and signals for screen reading or audible error reporting. Supported protocols are beep generation and VoiceOver. The VoiceOver protocol is only provided natively by Gibraltar machines (T2), however versions of macOS which support VoiceOver will see and use the implementation provided by OpenCore, on screens such as FileVault 2 unlock. VoiceOver is not supported before macOS High Sierra (10.13). Older macOS versions use the AppleHDA protocol (which is not currently implemented) instead.\n\nOnly one set of audio protocols can be available at a time, so this setting should be enabled in order to enable audio playback in the OpenCore user interface on Mac systems implementing some of these protocols.\n\nNote: The backend audio driver needs to be configured in UEFI Audio section for these protocols to be able to stream audio.";

"TT_AppleBootPolicy" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple boot policy protocol with a builtin version. This may be used to ensure APFS compatibility on VMs or legacy Macs.\n\nNote: This option is advisable on certain Macs, such as the MacPro5,1, that are APFS compatible but on which the Apple Boot Policy protocol has recovery detection issues.";

"TT_AppleDebugLog" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple Debug Log protocol with a builtin version.";

"TT_AppleEg2Info" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple EFI Graphics 2 protocol with a builtin version.\n\nNote: This protocol allows newer EfiBoot versions (at least 10.15) to expose screen rotation to macOS. Refer to forceDisplayRotationInEFI variable description on how to set screen rotation angle.\n\nNote 2: On systems without native support for ForceDisplayRotationInEFI, DirectGopRendering=true is also required for this setting to have an effect.";

"TT_AppleFramebufferInfo" = "Type: plist boolean\nFailsafe: false \nDescription: Replaces the Apple Framebuffer Info protocol with a builtin version. This may be used to override framebuffer information on VMs or legacy Macs to improve compatibility with legacy EfiBoot such as the one in macOS 10.4.";

"TT_AppleImageConversion" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple Image Conversion protocol with a builtin version.";

"TT_AppleImg4Verification" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple IMG4 Verification protocol with a builtin version. This protocol is used to verify im4m manifest files used by Apple Secure Boot.";

"TT_AppleKeyMap" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple Key Map protocols with builtin versions.";

"TT_AppleRtcRam" = "Type: plist boolean\nFailsafe: false \nDescription: Replaces the Apple RTC RAM protocol with builtin version.\n\nNote: Builtin version of Apple RTC RAM protocol may filter out I/O attempts to certain RTC memory addresses. \nThe list of addresses can be specified in 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:rtc-blacklist variable as a data array.";

"TT_AppleSecureBoot" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple Secure Boot protocol with a builtin version.";

"TT_AppleSmcIo" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple SMC I/O protocol with a builtin version.\n\nThis protocol replaces the legacy VirtualSmc UEFI driver, and is compatible with any SMC kernel extension. \nHowever, in case FakeSMC kernel extension is used, manual NVRAM key variable addition may be needed.";

"TT_AppleUserInterfaceTheme" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Apple User Interface Theme protocol with a builtin version.";

"TT_DataHub" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Data Hub protocol with a builtin version.\n\nNote: This will discard all previous entries if the protocol was already installed, so all properties required for the safe operation of the system must be specified in the configuration file.";

"TT_DeviceProperties" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the Device Property protocol with a builtin version. This may be used to ensure full compatibility on VMs and legacy Macs.\n\nNote: This will discard all previous entries if the protocol was already installed, so all properties required for safe operation of the system must be specified in the configuration file.";

"TT_FirmwareVolume" = "Type: plist boolean\nFailsafe: false\nDescription: Wraps Firmware Volume protocols or installs a new version to support custom cursor images for FileVault 2. Set to true to ensure FileVault 2 compatibility on anything other than on VMs and legacy Macs.\n\nNote: Several virtual machines, including VMware, may have corrupted cursor images in HiDPI mode and thus, may also require enabling this setting.";

"TT_HashServices" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces Hash Services protocols with builtin versions. Set to true to ensure FileVault 2 compatibility on platforms with defective SHA-1 hash implementations. This can be determined by an invalid cursor size when UIScale is set to 02. Platforms earlier than APTIO V (Haswell and older) are typically affected.";

"TT_OSInfo" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces the OS Info protocol with a builtin version. This protocol is typically used by the firmware and other applications to receive notifications from the macOS bootloader.";

"TT_PciIo" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces functions in CpuIo and PciRootBridgeIo with 64-bit MMIO compatible ones to fix Invalid Parameter when using 4G Decoding. This affects UEFI drivers such as AudioDxe which access 64-bit MMIO devices. Platforms earlier than APTIO V (Haswell and older) are typically affected.";

"TT_UnicodeCollation" = "Type: plist boolean\nFailsafe: false\nDescription: Replaces unicode collation services with builtin versions. Set to true to ensure UEFI Shell compatibility on platforms with defective unicode collation implementations. Legacy Insyde and APTIO platforms on Ivy Bridge, and earlier, are typically affected.";

/* ReservedMemory */
/* hs4-gm-1Ct */
"TT_uefi_reservedMemoryTable" = "1. Address\nType: plist integer\nFailsafe: 0\nDescription: Start address of the reserved memory region, which should be allocated as reserved effectively marking the memory of this type inaccessible to the operating system.\n\nThe addresses written here must be part of the memory map, have a EfiConventionalMemory type, and page-aligned (4 KBs).\n\nNote: Some types of firmware may not allocate memory areas used by S3 (sleep) and S4 (hibernation) code unless CSM is enabled causing wake failures. After comparing the memory maps with CSM disabled and enabled you could find these areas in the lower memory and fix them up by doing the reservation. Reger to the Sample.plist for details.\n\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Size\nType: plist integer\nFailsafe: 0\nDescription: Size of the reserved memory region, must be page-aligned (4 KBs).\n4. Type\nType: plist string\nFailsafe: Reserved\nDescription: Memory region type matching the UEFI specification memory descriptor types. Mapping:\n• Reserved — EfiReservedMemoryType\n• LoaderCode — EfiLoaderCode\n• LoaderData — EfiLoaderData\n• BootServiceCode — EfiBootServicesCode\n• BootServiceData — EfiBootServicesData\n• RuntimeCode — EfiRuntimeServicesCode\n• RuntimeData — EfiRuntimeServicesData\n• Available — EfiConventionalMemory\n• Persistent — EfiPersistentMemory\n• UnusableMemory — EfiUnusableMemory\n• ACPIReclaimMemory — EfiACPIReclaimMemory\n• ACPIMemoryNVS — EfiACPIMemoryNVS\n• MemoryMappedIO — EfiMemoryMappedIO\n• MemoryMappedIOPortSpace — EfiMemoryMappedIOPortSpace\n• PalCode — EfiPalCode\n5. Enabled\nType: plist boolean\nFailsafe: false\nDescription: This region will not be reserved unless set to true.";

/* Unload */
"TT_uefi_unloadTable" = "Type: plist array\nFailsafe: Empty\nDescription: Unload specified firmware drivers.\n\nTo be filled with plist string entries containing the names of firmware drivers to unload before loading the Drivers section. This setting is typically only required if a user-provided driver is a variant of an existing system firmware driver, and if the new driver would detect itself as partially loaded, or otherwise fail to operate correctly, if the old driver is not unloaded first.\n\nWarning: Unloading system firmware drivers is usually not required and not recommended. Poorly written drivers may crash when unloaded, or cause subsequent crashes (e.g by allowing themselves to be unloaded even though they have active dependencies). However standard UEFI network stack drivers should unload cleanly.\n\nNote 1: See SysReport/Drivers/DriverImageNames.txt for the list of drivers which this option can attempt to unload. The relevant name is the driver component name. Drivers are only listed if they implement DriverBindingProtocol and LoadedImageProtocol, and have an available component name.\n\nNote 2: The NVRAM Lang and PlatformLang variables are ignored when determining the driver component names recognised by this option, and listed in the SysReport file. This is in order to make unloading images stable across changes in these variables. The UEFI Shell dh command takes account of these variables, so in some circumstances may display different driver component names from those listed for this option, unless these variables are cleared.";

/* Quirks */
/* yXm-Kd-A6O */
"TT_ExitBootServicesDelay" = "Type: plist integer\nFailsafe: 0\nDescription: Adds delay in microseconds after EXIT_BOOT_SERVICES event.\n\nThis is a very rough workaround to circumvent the Still waiting for root device message on some APTIO IV firmware (ASUS Z87-Pro) particularly when using FileVault 2. It appears that for some reason, they execute code in parallel to EXIT_BOOT_SERVICES, which results in the SATA controller being inaccessible from macOS. A better approach is required and Acidanthera is open to suggestions. Expect 3 to 5 seconds to be adequate when this quirk is needed.";

/* 0un-PF-SFE */
"TT_TscSyncTimeout" = "Type: plist integer\nFailsafe: 0\nDescription: Attempts to perform TSC synchronisation with a specified timeout.\n\nThe primary purpose of this quirk is to enable early bootstrap TSC synchronisation on some server and laptop models when running a debug XNU kernel. For the debug kernel the TSC needs to be kept in sync across the cores before any kext could kick in rendering all other solutions problematic. The timeout is specified in microseconds and depends on the amount of cores present on the platform, the recommended starting value is 500000.\n\nThis is an experimental quirk, which should only be used for the aforementioned problem. In all other cases the quirk may render the operating system unstable and is not recommended. The recommended solution in the other cases is to install a kernel driver such as VoodooTSCSync, TSCAdjustReset, or CpuTscSync (a more specialised variant of VoodooTSCSync for newer laptops).\n\nNote: This quirk cannot replace the kernel driver because it cannot operate in ACPI S3 (sleep wake) mode and because the UEFI firmware only provides very limited multicore support which prevents precise updates of the MSR registers.";

"TT_ActivateHpetSupport" = "Type: plist boolean\nFailsafe: false\nDescription: Activates HPET support.\n\nOlder boards like ICH6 may not always have HPET setting in the firmware preferences, this option tries to force enable it.";

"TT_DisableSecurityPolicy" = "Type: plist boolean\nFailsafe: false\nDescription: Disable platform security policy.\n\nNote: This setting disables various security features of the firmware, defeating the purpose of any kind of Secure Boot. Do NOT enable if using UEFI Secure Boot.";

"TT_IgnoreInvalidFlexRatio" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware (such as APTIO IV) may contain invalid values in the MSR_FLEX_RATIO (0x194) MSR register. These values may cause macOS boot failures on Intel platforms.\n\nNote: While the option is not expected to harm unaffected firmware, its use is recommended only when specifically required.";

"TT_ReleaseUsbOwnership" = "Type: plist boolean\nFailsafe: false\nDescription: Attempt to detach USB controller ownership from the firmware driver. While most types of firmware manage to do this properly, or at least have an option for this, some do not. As a result, the operating system may freeze upon boot. Not recommended unless specifically required.";

"TT_RequestBootVarRouting" = "Type: plist boolean\nFailsafe: false\nDescription: Request redirect of all Boot prefixed variables from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID.\n\nThis quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi. The quirk lets default boot entry preservation at times when the firmware deletes incompatible boot entries. In summary, this quirk is required to reliably use the Startup Disk preference pane in firmware that is not compatible with macOS boot entries by design.\n\nBy redirecting Boot prefixed variables to a separate GUID namespace with the help of RequestBootVarRouting quirk we achieve multiple goals:\n• Operating systems are jailed and only controlled by OpenCore boot environment to enhance security.\n• Operating systems do not mess with OpenCore boot priority, and guarantee fluent updates and hibernation wakes for cases that require reboots with OpenCore in the middle.\n• Potentially incompatible boot entries, such as macOS entries, are not deleted or corrupted in any way.";

"TT_ResizeUsePciRbIo" = "Type: plist boolean\nFailsafe: false\nDescription: Use PciRootBridgeIo for ResizeGpuBars and ResizeAppleGpuBars\n\nThe quirk makes ResizeGpuBars and ResizeAppleGpuBars use PciRootBridgeIo instead of PciIo. This is needed on systems with a buggy PciIo implementation where trying to configure Resizable BAR results in Capability I/O Error. Typically this is required on older systems which have been modified with ReBarUEFI.";

"TT_UnblockFsConnect" = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware block partition handles by opening them in By Driver mode, resulting in an inability to install File System protocols.\n\nNote: This quirk is useful in cases where unsuccessful drive detection results in an absence of boot entries.";

"TT_ForgeUefiSupport" = "Type: plist boolean\nFailsafe: false\nDescription: Implement partial UEFI 2.x support on EFI 1.x firmware.\n\nThis setting allows running some software written for UEFI 2.x firmware, such as NVIDIA GOP Option ROMs on hardware with older EFI 1.x firmware (MacPro5,1).";

"TT_ReloadOptionRoms" = "Type: plist boolean\nFailsafe: false\nDescription: Query PCI devices and reload their Option ROMs if available.\n\nFor example, this option allows reloading NVIDIA GOP Option ROM on older Macs after the firmware version is upgraded via ForgeUefiSupport.";

"TT_EnableVectorAcceleration" = "Type: plist boolean\nFailsafe: false\nDescription: Enable AVX vector acceleration of SHA-512 and SHA-384 hashing algorithms.\n\nNote: This option may cause issues on certain laptop firmwares, including Lenovo.";

"TT_EnableVmx" = "Type: plist boolean\nFailsafe: false\nDescription: Enable Intel virtual machine extensions.\n\nNote: Required to allow virtualization in Windows on some Mac hardware. VMX is enabled or disabled and locked by BIOS before OpenCore starts on most firmware. Use BIOS to enable virtualization where possible.";

"TT_ForceOcWriteFlash" = "Type: plist boolean\nFailsafe: false\nDescription: Enables writing to flash memory for all OpenCore-managed NVRAM system variables.\n\nNote: This value should be disabled on most types of firmware but is left configurable to account for firmware that may have issues with volatile variable storage overflows or similar. Boot issues across multiple OSes can be observed on e.g. Lenovo Thinkpad T430 and T530 without this quirk. Apple variables related to Secure Boot and hibernation are exempt from this for security reasons. Furthermore, some OpenCore variables are exempt for different reasons, such as the boot log due to an available user option, and the TSC frequency due to timing issues. When toggling this option, a NVRAM reset may be required to ensure full functionality.";

"TT_ResizeGpuBars" = "Type: plist integer\nFailsafe: -1\nDescription: Configure GPU PCI BAR sizes.\n\nThis quirk sets GPU PCI BAR sizes as specified or chooses the largest available below the ResizeGpuBars value. The specified value follows PCI Resizable BAR spec. Use 0 for 1 MB, 1 for 2 MB, 2 for 4 MB, and so on up to 19 for 512 GB.\n\nResizable BAR technology allows to ease PCI device programming by mapping a configurable memory region, BAR, into CPU address space (e.g. VRAM to RAM) as opposed to a fixed memory region. This technology is necessary, because one cannot map the largest memory region by default, for the reasons of backwards compatibility with older hardware not supporting 64-bit BARs. Consequentially devices of the last decade use BARs up to 256 MB by default (4 remaining bits are used by other data) but generally allow resizing them to both smaller and larger powers of two (e.g. from 1 MB up to VRAM size).\n\nOperating systems targeting x86 platforms generally do not control PCI address space, letting UEFI firmware decide on the BAR addresses and sizes. This illicit practice resulted in Resizable BAR technology being unused up until 2020 despite being standardised in 2008 and becoming widely available in the hardware soon after.\n\nModern UEFI firmware allow the use of Resizable BAR technology but generally restrict the configurable options to failsafe default (OFF) and maximum available (ON). This quirk allows to fine-tune this value for testing and development purposes.\n\nConsider a GPU with 2 BARs:\n• BAR0 supports sizes from 256 MB to 8 GB. Its value is 4 GB.\n• BAR1 supports sizes from 2 MB to 256 MB. Its value is 256 MB.\n\nExample 1: Setting ResizeGpuBars to 1 GB will change BAR0 to 1 GB and leave BAR1 unchanged.\nExample 2: Setting ResizeGpuBars to 1 MB will change BAR0 to 256 MB and BAR0 to 2 MB.\nExample 3: Setting ResizeGpuBars to 16 GB will change BAR0 to 8 GB and leave BAR1 unchanged.\n\nNote 1 : This quirk shall not be used to workaround macOS limitation to address BARs over 1 GB. ResizeAppleGpuBars should be used instead.\n\nNote 2: While this quirk can increase GPU PCI BAR sizes, this will not work on most firmware as is, because the quirk does not relocate BARs in memory, and they will likely overlap. In most cases it is best to either update the firmware to the latest version or customise it with a specialised driver like ReBarUEFI.";
